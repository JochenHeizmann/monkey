
#Module mojo.audio

The audio module contains functions for playing sounds and music.

It uses a simple 'fixed' 32 channel model which allows you to play sounds through any one (or more) of 32 preset audio channels. Audio channels are identified by the use of integer ids in the range 0 to 31.

Commands that alter a channel's volume, pan and pitch can be used to either dynamically modify a playing sound, or used on a stopped changed to prepare playback properties.

In addition, a number of simple music commands are provided for 'streaming' long samples from file.

The music commands use a single internal channel, so it is not currently possibly to stream multiple long samples simultaneously.

Note that not all targets have equivalent audio capabilities. In particular:

@HTML5: ChannelPan and ChannelRate do nothing.

@Flash: ChannelRate does nothing.

@Flash: ChannelState and MusicState always returns -1, ie: 'unknown'.

@Android: ChannelState always returns -1, ie: 'unknown'.

@Android: Sounds to be used with PlaySound must be less than 1MB in length. Longer sounds can be played using the music commands.

Also, when designing for low performance hardware it's a good idea to try and minimize the number of channels used.


#Class Sound

Sound objects contain audio data preloaded from files.

#End


#Function LoadSound

Syntax::

Function @LoadSound:Sound( @path$ )

Parameters::

@path - file path of the sound to load.

Description::

Loads and returns a sound object.

#Function PlaySound

Syntax::

Function @PlaySound( @sound:Sound, @channel=0, @flags=0 )

Parameters::

@sound - a sound object.

@channel - an audio channel in the range 0 to 31

@flags - looping flags

Description::

Plays a sound through the specified channel.

@flags should be 1 to loop the sound, 0 to play it just once.


#Function StopChannel

Syntax::

Function @StopChannel( @channel )

Parameters::

@channel - an audio channel in the range 0 to 31.

Description::

Stops the specified audio channel.


#Function ChannelState

Syntax::

Function @ChannelState( @channel )

Parameters::

@channel - an audio channel in the range 0 to 31.

Description::

Returns the state of the specified audio channel: 1 if the channel is currently playing, 0 if the channel is currently not playing or -1 if the channel state cannot be determined.


#Function SetChannelVolume

Syntax::

Function @SetChannelVolume( @channel, @volume# )

Parameters::

@channel - an audio channel in the range 0 to 31.

@volume - a volume setting in the range 0 to 1, with 0 being silent and 1 being full volume.

Description::

Sets the volume of the specified audio channel.


#Function SetChannelPan

Syntax::

Function @SetChannelPan( @channel, @pan# )

Parameters::

@channel - an audio channel in the range 0 to 31.

@pan - a pan setting in the range -1 to +1, with -1 begin 'full left' and +1 being 'full right'.

Description::

Sets the pan of the specified audio channel.


#Function SetChannelRate

Syntax::

Function @SetChannelRate( @channel, @rate# )

Parameters::

@channel - an audio channel in the range 0 to 31.

@rate - a playback rate in the range .5 to 2, with .5 being an octave lower and 2 being an octave higher.

Description::

Sets the playback rate of the specified audio channel. 

This will affect the pitch of the sound being played.


#Function PlayMusic

Syntax::

Function @PlayMusic( @path$, @flags )

Parameters::

@path - path of audio file to play.

@flags - playback flags, 1 to loop music, 0 to play it once.

Description::

Plays an audio file through the internal music channel, using audio streaming if possible.

Since there is only one music channel, any music currently play will first be stopped.

@flags should be 1 to loop the music, 0 to play it just once.

#Function StopMusic

Syntax::

Function @StopMusic()

Description::

Stops any music currently playing.


#Function MusicState

Syntax::

Function @MusicState()

Description:

Returns 1 if music is currently playing, 0 if music is currently not playing or -1 if music state cannot be determined.


#Function SetMusicVolume

Syntax::

Function @SetMusicVolume( @volume# )

Parameters::

@volume - a volume setting in the range 0 to 1, with 0 being silent and 1 being full volume.

Description::

Sets the music volume.

If music is currently playing, this will set the music volume immediately.

Whether or not music is playing, this will set the volume to be used the next time @PlayMusic is called.
