
#Module monkey.map

The map module provides support for the %map data structure.

A map is a container style object that provides a mechanism for associating %key objects with %value objects. This is done using @Node objects that contains a reference to both a key and a value, along with information about the node's location within the map.

Each key in a map occurs exactly once - setting a key to a certain value overwrites any previous value that may have been asspociated with that key. 

Maps are very efficient, and can handle inserting, removing and finding keys in 'O(log2)' time. That is, the time needed to insert, remove or find a key is proportional to log2 of the number of items in the map.


#Class Map

Syntax::

Class @Map< @KeyType, @ValueType >

Description::

The abstract @Map class.

Extending classes must implement the @Compare method.


#Method IsEmpty

Syntax::

Method @IsEmpty?()

Description::

Returns true if the map is empty, ie: contains no keys.


#Method Contains

Syntax::

Method @Contains?( @key:KeyType )

Parameters::

@key - value to check

Description::

Return true if the specified @key is contained in the map.


#Method Clear

Syntax::

Method @Clear()

Description::

Removes all elements from the map.


#Method Get

Syntax::

Method @Get:ValueType( @key:KeyType )

Parameters::

@key - key to find value for

Description::

Returns the value contained in the map associated with the specified key.

If the key is not contained in the map, @Null is returned.

See also::

@Set


#Method Set

Syntax::

Method @Set( @key:KeyType, @value:ValueType )

Parameters::

@key - key to set

@value - value to associate with key.

Description::

Inserts @key into the map and associates @value with it.

If the map already contained @key, its value is overwritten.

See also::

@Get


#Method Remove

Syntax::

Method @Remove( @key:KeyType )

Parameters::

@key - key to remove

Description::

Removes @key from the map.


#Method Keys

Syntax::

Method @Keys:Object()

Description::

Returns an enumerator object that can be used to enumerate all keys in the map.


#Method Values

Syntax::

Method @Values:Object()

Returns an enumerator object that can be used to enumerate all values in the map.


#Method ObjectEnumerator

Syntax::

Method @ObjectEnumerator:Object()

Desciption::

Returns an enumerator object that can be used to enumerate all nodes in the map with a @For @EachIn loop.


#End	'Class Map

#Class Node

Syntax::

Class @Node< @KeyType, @ValueType >

Description::

Node objects are responsible for mainting the association between keys and values.


#Method Key

Syntax::

Method @Key:KeyType()

Description::

Returns the key contained in the node. 


#Method Value

Syntax::

Method @Value:ValueType()

Description::

Returns the value contained in the node.


#End	'Class Node


#Class IntMap

Syntax::

Class @IntMap< @Type > Extends Map<IntObject,Type>

Description::

#End	'Class IntMap


#Class FloatMap

Syntax::

Class @FloatMap< @Type > Extends Map<FloatObject,Type>

#End	'Class FloatMap


#Class StringMap

Syntax::

Class @StringMap< @Type > Extends Map<StringObject,Type>

#End	'Class StringMap
