
#Module monkey.set

The set module provides support for the %set data structure.

A set is a container style object that provides a mechanism for keeping track of a number of objects.

Each object in a set occurs exactly once - inserting the same object into a set multiple times does not result in the set containing multiple references to the same object.

Sets are implemented behind the scenes using @Map objects, and are just as efficient at insertng, removing and finding objects.


#Class Set

Syntax::

Class @Set< @Type >

Description::

The abstract @Set class.

Extending classes must invoke Super.New with an instance of a map object.


#Method New

Syntax::

Method @New( map:Map<Type,Object> )

Description::

Extending classes should invoke this method with a valid map object to be used to implement the set.


#Method Clear

Syntax::

Method @Clear()

Description::

Removes all objects from the set.


#Method Count

Syntax::

Method @Count()

Description::

Counts and returns the number of objects in the set.

Note that this method takes O(N) time - that is, it must visit each object in the set.


#Method IsEmpty

Syntax::

Method @IsEmpty?()

Description::

Returns true if the set is empty, ie: contains no objects.


#Method Contains

Syntax::

Method @Contains?( @value:Type )

Parameters::

@value - value to check

Description::

Return true if the specified @value is contained in the set.


#Method Insert

Syntax::

Method @Insert( @value:Type )

Parameters::

@value - value to insert.

Description::

Inserts @value into the set.


#Method Remove

Syntax::

Method @Remove( @value:Type )

Parameters::

@value - value to remove.

Description::

Removes @value from the set.


#Method ObjectEnumerator

Syntax::

Method @ObjectEnumerator:Object()

Desciption::

Returns an enumerator object that allows sets to be used with @For...@EachIn loops.


#End


#Class IntSet

Syntax::

Class @IntSet Extends Set<Int>

Description::

#End


#Class FloatSet

Syntax::

Class @FloatSet Extends Set<Float>

#End


#Class StringSet

Syntax::

Class @StringSet Extends Set<String>

#End
