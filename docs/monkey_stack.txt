
#Module monkey.stack

The stack module provides support for %stacks.

Stacks provide 2 basic operations - %push and %pop. Pushing an item on a stack adds the item to the top of the stack, while popping an item removes the item from the top of the stack and returns it.

Stacks may also be efficiently indexed using an integer index, and elements may be inserted and removed. This allows stacks to also be used as a dynamic array (an array where the length can change), much like a C++ %vector, or C# %ArrayList.

The stack module includes the main @Stack class, as well as the convenience classes @IntStack, @FloatStack and @StringStack.


#Class Stack

Syntax::

Class @Stack< @Type >

Parameters::

@Type - The class of the objects contained in the stack.

Description::

The stack class manages the elements of a stack.


#Method New

Syntax::

Method @New()

Method @New( @values:Type[] )

Parameters::

@values - an array of values

Description::

Creates a new @Stack object, optionally initialized with an array of values.


#Method ToArray

Syntax::

Method @ToArray:Type[]() 

Description::

Converts the stack to an array of values.


#Method Clear

Syntax::

Method @Clear()

Description::

Removes all items from the stack.


#Method Length

Syntax::

Method @Length() Property

Description::

Returns the number of items on the stack.


#Method IsEmpty

Syntax::

Method @IsEmpty?() Property

Description::

Return true if the stack is empty - ie: it contains no items.


#Method Push

Syntax::

Method @Push( @value:Type )

Parameters::

@value - value to push.

Description::

Pushes a value on the top of the stack.

This will increase the length of the stack by 1.


#Method Pop

Syntax::

Method @Pop:Type()

Description::

Removes the item at the top of the stack and returns it.

This will decrease the length of the stack by 1.

If the stack is empty, the behaviour of @Pop is undefined.


#Method Top

Syntax::

Method @Top:Type()

Description::

Returns the item at the top of the stack.

If the stack is empty, the behaviour of @Top is undefined.


#Method Set

Syntax::

Method @Set( @index,@value:Type )

Parameters::

@index - valid integer index. Must be >=0 and <length.

@value - value to set.

Decsription::

Overwrites the existing value at index @index with the new value @value.

An index of 0 represents the bottom of the stack, and an index of length-1 represents the top.


#Method Get

Syntax::

Method @Get:Type( @index )

Parameters::

@index - valid integer index. Must be >=0 and <length.

Description::

Returns the element at the specified index.

An index of 0 represents the bottom of the stack, and an index of length-1 represents the top.


#Method Insert

Syntax::

Method @Insert( @index, @value:Type )

Parameters::

@index - valid integer index. Must be >=0 and <length.

@value - value to insert.

Description::

Inserts @value into the stack, shifting existing elements up if necessary.

This will increase the length of the stack by 1.

An index of 0 represents the bottom of the stack, and an index of length-1 represents the top.


#Method Remove

Syntax::

Method @Remove( @index )

Parameters::

@index - valid integer index. Must be>=0 and <length.

Description::

Removes the value at the specified index from the stack, shifting existing elements down if necessary.

This will decrease the length of the stack by 1.

An index of 0 represents the bottom of the stack, and an index of length-1 represents the top.


#Method RemoveEach

Syntax::

Method @RemoveEach( @value:Type )

Parameters::

@value - value to remove.

Description::

Finds and removes all elements in the stack equal to @value, shifting existing elements down if necessary.

This will decrease the length of the stack by the number of occurances of @value in the stack.


#Method ObjectEnumerator

Syntax::

Method @ObjectEnumerator:Object()

Description::

Returns an enumerator object suitable for use with @EachIn loops.


#Method Backwards

Syntax::

Method @Backwards:Object()

Description::

Returns an object that may be used to iterate backwards through the stack with a For EachIn loop.

Note that this does not actually reverse or modify the stack in any way.

Example:
{{
Function Main()

	Local stk:=New StringStack
	
	stk.Push "Hello"
	stk.Push "there"
	stk.Push "this"
	stk.Push "is"
	stk.Push "a"
	stk.Push "test"
	
	Print "Fowards:"
	For Local t$=EachIn stk
		Print t
	Next
	
	Print ""
	
	Print "Backwards:"
	For Local t$=Eachin stk.Backwards()
		Print t
	Next

End
}}

#End

#Class IntStack

Syntax::

Class @IntStack Extends Stack<Int>

Description::

@IntStack is a convenience class for dealing with stacks of ints.

Example::
{{
Function Main()

	Local vec:=New IntStack
	
	For Local i=1 To 10
		vec.AddLast i
	Next
	
	For Local i=Eachin vec
		Print i
	Next

End
}}

#End	'Class IntStack


#Class FloatStack

Syntax::

Class @FloatStack Extends Stack<Float>

Description::

@FloatStack is a convenience class for dealing with stacks of floats.

Example::
{{
Function Main()

	Local vec:=New FloatStack
	
	For Local i#=1 To 10
		vec.AddLast i
	Next
	
	For Local i#=Eachin vec
		Print i
	Next

End
}}

#End	'Class FloatStack


#Class StringStack

Syntax::

Class @StringStack Extends Stack<String>

Description::

@StringStack is a convenience class for dealing with stacks of strings.

Example::
{{
Function Main()

	Local vec:=New StringStack
	
	vec.AddLast "Hello"
	vec.AddLast "there"
	vec.AddLast "this"
	vec.AddLast "is"
	vec.AddLast "a"
	vec.AddLast "StringStack"
	
	Print vec.Join( " " )

End
}}

#Method Join

Syntax::

Method @Join$( @separator$ )

Parameters::

@separator - string to use to separate elements.

Description::

Concatenates the elements of the stack and joins them together with @separator.

#End	'Class StringStack
