
#Module monkey.list

The list module provdes support for linked lists with the @List class.

A linked list is a container style data structure that provides efficient support for the addition, removal and sequential traversal of objects.

A linked list works by connecting elements together with 'next' and 'previous' references, making it very efficient to get from one element to the next, but not so efficient for accessing arbitrary elements.

This connection between elements is achieved using separate @Node objects (there is one per element) which contain references to the next and previous nodes in the list, as well as the actual object managed by the node.

The list module also provides the convenience classes @IntList, @FloatList and @StringList, which allow you to create lists of primitive types.

Here is an example of lists in action:

{{
Function Main()

	'create a new list
	Local myList:=New StringList
	
	'add a bunch of stuff
	myList.AddLast "Hello"
	myList.AddLast "BAM!"
	myList.AddLast "there"
	myList.AddLast "BAM!"
	myList.AddLast "this"
	myList.AddLast "BAM!"
	myList.AddLast "is"
	myList.AddLast "BAM!"
	myList.AddLast "a"
	myList.AddLast "BAM!"
	myList.AddLast "List"
	
	'removes all occurances of a value
	myList.RemoveEach "BAM!"

	'iterate through a list with an EachIn loop
	For Local item:=Eachin myList
		Print item
	Next
	
	Print ""

	'Iterate backwards through the list	
	For Local item:=Eachin myList.Backwards()
		Print item
	Next
	
End
}}

#Class List

Syntax::

Class @List< @Type >

Description::

The @List class manages the individual nodes and data that make up a linked list.


#Method IsEmpty

Syntax::

Method @IsEmpty?()

Description::

Return @True if the list is empty, @False if not empty.


#Method Count

Syntax::

Method @Count()

Description::

Returns the number of elements in the list.

Note that this method takes time proportional to the number of elements in the list.


#Method First

Syntax::

Method @First:Type()

Description::

Returns the first element in the list.


#Method Last

Syntax::

Method @Last:Type()

Description::

Returns the last element in the list.


#Method Clear

Syntax::

Method @Clear()

Description::

Removes all the elements from the list.


#Method AddFirst

Syntax::

Method @AddFirst:Node<Type>( @value:Type )

Description::

Adds a value at the start of the list.


#Method AddLast

Syntax::

Method @AddLast:Node<Type>( @value:Type )

Description::

Adds a value at the end of the list.


#Method RemoveFirst

Syntax::

Method @RemoveFirst:Type()

Description::

Removes the first value in the list and returns it.

Behaviour is undefined if the list is empty.


#Method RemoveLast

Syntax::

Method @RemoveLast:Type()

Description::

Removes the last value in the list and returns it.

Behaviour is undefined if the list is empty.


#Method RemoveEach

Syntax::

Method @RemoveEach( @value:Type )

Description::

Finds and removes all elements in the list equal to @value.


#Method ObjectEnumerator

Syntax::

Method @ObjectEnumerator:Object()

Description::

Returns an object enumerator for use with For Eachin loops.


#Method Backwards

Syntax::

Method @Backwards:Object()

Description::

Returns an object that may be used to iterate backwards through the list with a For EachIn loop.

Note that this doesn't not actually reverse or modify the list in any way.

Example:
{{
Function Main()

	Local list:=New StringList
	
	list.AddLast "Hello"
	list.AddLast "there"
	list.AddLast "this"
	list.AddLast "is"
	list.AddLast "a"
	list.AddLast "test"
	
	Print "Fowards:"
	For Local t$=EachIn list
		Print t
	Next
	
	Print ""
	
	Print "Backwards:"
	For Local t$=Eachin list.Backwards()
		Print t
	Next

End
}}

#End	'Class List

#Class Node

Syntax::

Class @Node< @T >



#Method Value

Syntax::

Method @Value:Type()

Description::

Returns the value stored in this node.


#Method Remove

Syntax::

Method @Remove()

Description::

Removes this node from its list.

#End	'Class List

#Class IntList

Syntax::

Class @IntList Extends List<IntObject>

Description::

@IntList is a convenience class for handling lists of integer values.

#Method ToArray

Syntax::

Method @ToArray:Int[]()

Description::

Converts the list to an array of ints.

#End	'Class IntList

#Class FloatList

Syntax::

Class @FloatList Extends List<FloatObject>

Description::

@FloatList is a convenience class for handling lists of floating point values.

#Method ToArray

Syntax::

Method @ToArray:Float[]()

Description::

Converts the list to an array of floats.

#End	'Class FloatList

#Class StringList

Syntax::

Class @StringList Extends List<StringObject>

Description::

@StringList is a convenience class for handling lists of string values.

#Method ToArray

Syntax::

Method @ToArray:String[]()

Description::

Converts the list to an array of strings.

#End	'Class StringList
