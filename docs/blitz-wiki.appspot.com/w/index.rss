<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:gml="http://www.opengis.net/gml">
<channel>
<atom:link href="" rel="self" type="application/rss+xml" />
<title>Blitz Wiki Pages</title>
<description>New pages in Blitz Wiki.</description>
<link>http://blitz-wiki.appspot.com/w/index</link>

<item>
<title>Extends</title>
<link>http://blitz-wiki.appspot.com/Extends</link>
<guid>http://blitz-wiki.appspot.com/Extends</guid>
<pubDate>Wed, 1 Feb 2012 23:03:07 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Extends&lt;/h1&gt;
&lt;p&gt;Declares that class definition inherits a parent class.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class &lt;em&gt;Identifier&lt;/em&gt; [ &amp;lt; &lt;em&gt;Parameters&lt;/em&gt; &amp;gt; ] [ Extends &lt;em&gt;Class&lt;/em&gt; ] [ Implements &lt;em&gt;Interfaces&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Declarations...&lt;/em&gt;&lt;br /&gt;
End [ Class ]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Extends keyword allows a class to &#39;extend&#39; a parent class, thereby inheriting all of its fields, methods, functions, globals and constants.&lt;/p&gt;
&lt;p&gt;This new class can add its own fields, methods, etc, but can also over-ride the existing fields, methods and so on by redefining them.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Class&quot; title=&quot;Class&quot;&gt;Class&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Super&quot; title=&quot;Super&quot;&gt;Super&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#classes&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here we have three classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a base class, Animal, with an &#39;x&#39; field, a &#39;legs&#39; field and a &#39;Move&#39; method;&lt;/li&gt;
&lt;li&gt;the Dog class &#39;extends&#39; the Animal class, inheriting the x and legs fields and adding its own &#39;Bark&#39; method;&lt;/li&gt;
&lt;li&gt;the Fly class also extends the Animal class, but over-rides the legs field and Move method, while adding a &#39;y&#39; field and a &#39;Buzz&#39; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Class Animal

&amp;nbsp;&amp;nbsp;Field x
&amp;nbsp;&amp;nbsp;Field legs = 4

&amp;nbsp;&amp;nbsp;Method Move ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x = x + 1
&amp;nbsp;&amp;nbsp;End

End

Class Dog Extends Animal

&amp;nbsp;&amp;nbsp;Method Bark ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print &quot;Woof&quot;
&amp;nbsp;&amp;nbsp;End

End

Class Fly Extends Animal

&amp;nbsp;&amp;nbsp;Field legs = 6
&amp;nbsp;&amp;nbsp;Field y

&amp;nbsp;&amp;nbsp;Method Move ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x = Rnd (-4, 4)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y = Rnd (-4, 4)
&amp;nbsp;&amp;nbsp;End

&amp;nbsp;&amp;nbsp;Method Buzz ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print &quot;ZzzzZZZzzzzzZZZZ...&quot;
&amp;nbsp;&amp;nbsp;End

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Super</title>
<link>http://blitz-wiki.appspot.com/Super</link>
<guid>http://blitz-wiki.appspot.com/Super</guid>
<pubDate>Wed, 1 Feb 2012 23:02:06 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Super&lt;/h1&gt;
&lt;p&gt;Provides parent class access.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Super&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Super keyword allows a method within an extended class to call a &#39;super class&#39; method, ie. one defined in the class it is extended from.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Self&quot; title=&quot;Self&quot;&gt;Self&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Extends&quot; title=&quot;Extends&quot;&gt;Extends&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Method&quot; title=&quot;Method&quot;&gt;Method&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#methods&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In this example, if &#39;superpowers&#39; is True, method Fly from class Hero will print a string. If not, it will call the &#39;super&#39; method Fly in class Human.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
Class Human

&amp;nbsp;&amp;nbsp;Method Fly ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print &quot;No powers&amp;nbsp;â€” cannot fly!&quot;
&amp;nbsp;&amp;nbsp;End

End

Class Hero Extends Human

&amp;nbsp;&amp;nbsp;Field superpowers:Bool = True

&amp;nbsp;&amp;nbsp;Method Fly ()

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If superpowers
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print &quot;Up, up and a--weee!&quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Else
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Super.Fly
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Endif

&amp;nbsp;&amp;nbsp;End

End

Function Main ()

&amp;nbsp;&amp;nbsp;Local atomstar:Hero = New Hero

&#39;&amp;nbsp;&amp;nbsp;atomstar.superpowers = False &#39; Uncomment to give up powers for love...

&amp;nbsp;&amp;nbsp;atomstar.Fly

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Self</title>
<link>http://blitz-wiki.appspot.com/Self</link>
<guid>http://blitz-wiki.appspot.com/Self</guid>
<pubDate>Wed, 1 Feb 2012 23:00:58 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Self&lt;/h1&gt;
&lt;p&gt;Object&#39;s own reference.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Self&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Self keyword provides a way for a method to access the object it belongs to.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Super&quot; title=&quot;Super&quot;&gt;Super&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Method&quot; title=&quot;Method&quot;&gt;Method&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#methods&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;An object which passes a reference to itself to an outside function. In this case, the Speak method passes Self as the first parameter of the DrawSpeechBubble function.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
Class Person

&amp;nbsp;&amp;nbsp;Field x:Int, y:Int

&amp;nbsp;&amp;nbsp;Method Speak (text:String)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DrawSpeechBubble (Self, text)
&amp;nbsp;&amp;nbsp;End

End

Function DrawSpeechBubble (p:Person, say:String)
&amp;nbsp;&amp;nbsp;DrawText say, p.x, p.y
End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Types</title>
<link>http://blitz-wiki.appspot.com/Types</link>
<guid>http://blitz-wiki.appspot.com/Types</guid>
<pubDate>Wed, 1 Feb 2012 03:13:10 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Types&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Error</title>
<link>http://blitz-wiki.appspot.com/Error</link>
<guid>http://blitz-wiki.appspot.com/Error</guid>
<pubDate>Wed, 1 Feb 2012 00:10:16 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Error&lt;/h1&gt;
&lt;p&gt;Generate a runtime error.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function Error:Void( str:String )&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Generates a runtime error message and ends program execution.&lt;/p&gt;
&lt;p&gt;If str is an empty string, program execution will end but no runtime error message with be generated.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Print</title>
<link>http://blitz-wiki.appspot.com/Print</link>
<guid>http://blitz-wiki.appspot.com/Print</guid>
<pubDate>Wed, 1 Feb 2012 00:07:50 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function Print&lt;/h1&gt;
&lt;p&gt;Print a string.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function Print:Void( str:String )&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Prints str.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Property</title>
<link>http://blitz-wiki.appspot.com/Property</link>
<guid>http://blitz-wiki.appspot.com/Property</guid>
<pubDate>Wed, 1 Feb 2012 22:58:50 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Property&lt;/h1&gt;
&lt;p&gt;Declares method as property.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method &lt;em&gt;Identifier&lt;/em&gt;: &lt;em&gt;ReturnType&lt;/em&gt; ( &lt;em&gt;Parameters&lt;/em&gt; ) [ Property ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
End [ Method ]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Property keyword declares that a method is acting as a class property. Properties are generally used to access a single (usually private) field in a controlled fashion.&lt;/p&gt;
&lt;p&gt;Unlike a standard method, a property acts as a proxy for a field, and so can be written to (and read from) using the same syntax as for a field or variable. For example, reading a property:&lt;/p&gt;
&lt;pre&gt;
result = myobject.MyProperty
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that because it&#39;s acting like a field, no method-call brackets are required.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Writing to a property:&lt;/p&gt;
&lt;pre&gt;
myobject.MyProperty = value
&lt;/pre&gt;

&lt;p&gt;Properties are usually declared in pairs with the same name:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &#39;read&#39; version with no parameters which reads a specific field, and;&lt;/li&gt;
&lt;li&gt;a &#39;write&#39; version with a single parameter which writes to the same field.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In the second example above, the value being assigned is the parameter defined in the &#39;write&#39; property.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Properties with multiple parameters cannot use this shortened syntax and must be called in the same way as a standard method.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Method&quot; title=&quot;Method&quot;&gt;Method&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#methods&quot;&gt;Language reference (Methods)&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;pre&gt;
&#39; Runnable example...

Class BankAccount

&amp;nbsp;&amp;nbsp;Private

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Field balance:Int

&amp;nbsp;&amp;nbsp;Public

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Method Balance (dollars:Int) Property

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If dollars &gt; 1000000
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print &quot;Sent for security check!&quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Else
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance = dollars
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Endif

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;End

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Method Balance:String () Property
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Return &quot;$&quot; + balance
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;End

End

Function Main ()

&amp;nbsp;&amp;nbsp;Local account:BankAccount = New BankAccount

&amp;nbsp;&amp;nbsp;account.Balance = 50 &#39; 00000 &#39; Join to trigger security check!

&amp;nbsp;&amp;nbsp;Print account.Balance

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>New</title>
<link>http://blitz-wiki.appspot.com/New</link>
<guid>http://blitz-wiki.appspot.com/New</guid>
<pubDate>Wed, 1 Feb 2012 23:00:12 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Operator New&lt;/h1&gt;
&lt;p&gt;Creates and initialises object of given class.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Local &lt;em&gt;Identifier:Class&lt;/em&gt; [ = New &lt;em&gt;Class&lt;/em&gt; ]&lt;br /&gt;
Local &lt;em&gt;Identifier:&lt;/em&gt;= New &lt;em&gt;Class&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The New operator creates a new object of the given class and assigns it to an identifier of that class.&lt;/p&gt;
&lt;p&gt;The alternative syntax provided allows the identifier&#39;s class to be deduced from the expression.&lt;/p&gt;
&lt;p&gt;See the Classes section of the monkey language reference for more details on the New operator.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#classes&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Class MyObject
&amp;nbsp;&amp;nbsp;Field whatever:Int = 1
End

Local thing:MyObject = New MyObject

&#39; thing is now an object of type MyObject...

Print thing.whatever
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Private</title>
<link>http://blitz-wiki.appspot.com/Private</link>
<guid>http://blitz-wiki.appspot.com/Private</guid>
<pubDate>Wed, 1 Feb 2012 22:58:29 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Directive Private&lt;/h1&gt;
&lt;p&gt;Declares following code as private to local module or class.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Private&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Public and Private directives are used to control the visibility of subsequent declarations in a module or class.&lt;/p&gt;
&lt;p&gt;If the Private directive is used in the main body of a module, all subsequent declarations will be private and will not be visible outside of the current module.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Public&quot; title=&quot;Public&quot;&gt;Public&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#visibility&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Private
Global x,y,z        &#39;These are private to the current module

Public
Global P,Q,R        &#39;These can be used by any module
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Public</title>
<link>http://blitz-wiki.appspot.com/Public</link>
<guid>http://blitz-wiki.appspot.com/Public</guid>
<pubDate>Wed, 1 Feb 2012 22:58:00 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Directive Public&lt;/h1&gt;
&lt;p&gt;Declares following code as publicly accessible.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Public&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Public and Private directives are used to control the visibility of subsequent declarations in a module or class.&lt;/p&gt;
&lt;p&gt;If the Public directive is used in the main body of a module, all subsequent declarations will be public, and will be visible outside of the current module.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Private&quot; title=&quot;Private&quot;&gt;Private&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#visibility&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Private
Global x,y,z        &#39;These are private to the current module/class

Public
Global P,Q,R        &#39;These can be used by any module/class
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Method</title>
<link>http://blitz-wiki.appspot.com/Method</link>
<guid>http://blitz-wiki.appspot.com/Method</guid>
<pubDate>Wed, 1 Feb 2012 23:34:43 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Method&lt;/h1&gt;
&lt;p&gt;Declares the beginning of a class method.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method &lt;em&gt;Identifier&lt;/em&gt;: &lt;em&gt;ReturnType&lt;/em&gt; ( &lt;em&gt;Parameters&lt;/em&gt; ) [ Abstract ] [ Property ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
End [ Method ]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Method keyword begins the declaration of a class method.&lt;/p&gt;
&lt;p&gt;Please see the Methods section of the monkey language reference for more information on methods.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Class&quot; title=&quot;Class&quot;&gt;Class&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Property&quot; title=&quot;Property&quot;&gt;Property&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#classes&quot;&gt;Language reference (Classes)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#methods&quot;&gt;Language reference (Methods)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;An example of methods as statements.&lt;/p&gt;
&lt;pre&gt;
Class GameObject

&amp;nbsp;&amp;nbsp;Field x:Float
&amp;nbsp;&amp;nbsp;Field y:Float

&amp;nbsp;&amp;nbsp;Method PrintX ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print x
&amp;nbsp;&amp;nbsp;End

&amp;nbsp;&amp;nbsp;Method PrintY ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print y
&amp;nbsp;&amp;nbsp;End

End

Local g:GameObject = New GameObject

p.x = 100
p.y = 200

&#39; Accessing method...

p.PrintX
p.PrintY
&lt;/pre&gt;

&lt;p&gt;Strict mode version of above GameObject class. (Note use of Void return type.)&lt;/p&gt;
&lt;pre&gt;
Class GameObject

&amp;nbsp;&amp;nbsp;Field x:Float
&amp;nbsp;&amp;nbsp;Field y:Float

&amp;nbsp;&amp;nbsp;Method PrintX:Void ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print x
&amp;nbsp;&amp;nbsp;End

&amp;nbsp;&amp;nbsp;Method PrintY:Void ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print y
&amp;nbsp;&amp;nbsp;End

End
&lt;/pre&gt;

&lt;p&gt;Method returning value of Float type.&lt;/p&gt;
&lt;pre&gt;
Class GameObject

&amp;nbsp;&amp;nbsp;Method AddFloats:Float (value1:Float, value2:Float)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Return value1 + value2
&amp;nbsp;&amp;nbsp;End

End

Local g:GameObject = New GameObject

&#39; Accessing method...

Print g.AddFloats (1.5, 2.0)
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Function</title>
<link>http://blitz-wiki.appspot.com/Function</link>
<guid>http://blitz-wiki.appspot.com/Function</guid>
<pubDate>Wed, 1 Feb 2012 22:56:56 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Function&lt;/h1&gt;
&lt;p&gt;Declares the beginning of a function.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function &lt;em&gt;Identifier&lt;/em&gt;: &lt;em&gt;ReturnType&lt;/em&gt; ( &lt;em&gt;Parameters&lt;/em&gt; )&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
End [ Function ]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Function keyword begins the declaration of a function.&lt;/p&gt;
&lt;p&gt;Please see the Functions section of the monkey language reference for more information on functions.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#functions&quot;&gt;Language reference (Functions)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#strict&quot;&gt;Language reference (Strict mode)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;The Main function, required by all monkey programs.&lt;/p&gt;
&lt;pre&gt;
Function Main ()
&amp;nbsp;&amp;nbsp;Print &quot;Hello&quot;
End
&lt;/pre&gt;

&lt;p&gt;The Main function in Strict mode; requires Int return type and Return statement.&lt;/p&gt;
&lt;pre&gt;
Strict

Function Main:Int ()
&amp;nbsp;&amp;nbsp;Print &quot;Hello&quot;
&amp;nbsp;&amp;nbsp;Return 0
End
&lt;/pre&gt;

&lt;p&gt;A function that returns the result of adding two floating-point values.&lt;/p&gt;
&lt;pre&gt;
Function AddFloats:Float (value1:Float, value2:Float)
&amp;nbsp;&amp;nbsp;Return value1 + value2
End

Print AddFloats (1, 2)
&lt;/pre&gt;

&lt;p&gt;For functions that don&#39;t return a value in Strict mode, the Void return type must be specified in the function declaration.&lt;/p&gt;
&lt;pre&gt;
Strict

Function PrintMessage:Void (message:String)
&amp;nbsp;&amp;nbsp;Print message
End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Class</title>
<link>http://blitz-wiki.appspot.com/Class</link>
<guid>http://blitz-wiki.appspot.com/Class</guid>
<pubDate>Wed, 1 Feb 2012 22:56:41 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Class&lt;/h1&gt;
&lt;p&gt;Declares the beginning of an object class.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class &lt;em&gt;Identifier&lt;/em&gt; [ &amp;lt; &lt;em&gt;Parameters&lt;/em&gt; &amp;gt; ] [ Extends &lt;em&gt;Class&lt;/em&gt; ] [ Implements &lt;em&gt;Interfaces&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&#39; Declarations...&lt;br /&gt;
End [ Class ]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Class keyword begins the declaration of a custom class. Classes can contain fields, methods, constants, globals and functions.&lt;/p&gt;
&lt;p&gt;To access an object&#39;s fields, methods, constants, globals and functions, use the syntax &lt;em&gt;object.identifier&lt;/em&gt;. (See example.)&lt;/p&gt;
&lt;p&gt;Please see the Classes section of the monkey language reference for more information on classes.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#classes&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
&#39; Declaring class and fields...

Class GameObject
&amp;nbsp;&amp;nbsp;Field x:Float
&amp;nbsp;&amp;nbsp;Field y:Float
End

&#39; Creating object &quot;g&quot; of type &quot;GameObject&quot;...

Local g:GameObject = New GameObject

&#39; Accessing fields...

g.x = 100
g.y = 200

Print g.x
Print g.y
&lt;/pre&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Simple Extends example.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
Class GameObject
&amp;nbsp;&amp;nbsp;Field x:Float
&amp;nbsp;&amp;nbsp;Field y:Float
End

Class Player Extends GameObject

&amp;nbsp;&amp;nbsp;Field name:String
&amp;nbsp;&amp;nbsp;Field points:Int = 0

&amp;nbsp;&amp;nbsp;Method PrintName ()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print name
&amp;nbsp;&amp;nbsp;End

End

Local p:Player = New Player

&#39; Accessing fields, including those defined by
&#39; the class being extended...

p.x = 100
p.y = 200

p.name = &quot;Mary&quot;
p.points = 100

Print p.x
Print p.y

Print p.points

&#39; Accessing method...

p.PrintName
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Monkey Step 3</title>
<link>http://blitz-wiki.appspot.com/Monkey_Step_3</link>
<guid>http://blitz-wiki.appspot.com/Monkey_Step_3</guid>
<pubDate>Mon, 30 Jan 2012 22:07:34 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h1&gt;Click on shit for points&lt;/h1&gt;
&lt;h2&gt;Managing game state&lt;/h2&gt;
&lt;h2&gt;Shooting your target&lt;/h2&gt;
&lt;h2&gt;Bells and whistles&lt;/h2&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>False</title>
<link>http://blitz-wiki.appspot.com/False</link>
<guid>http://blitz-wiki.appspot.com/False</guid>
<pubDate>Wed, 1 Feb 2012 23:13:23 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Operator False&lt;/h1&gt;
&lt;p&gt;Represents boolean true value.&lt;/p&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Boolean expressions evaluate to either true or false. In Monkey the operators True and False represent these two states.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/True&quot; title=&quot;True&quot;&gt;True&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#expressions&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>True</title>
<link>http://blitz-wiki.appspot.com/True</link>
<guid>http://blitz-wiki.appspot.com/True</guid>
<pubDate>Wed, 1 Feb 2012 23:13:09 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Operator True&lt;/h1&gt;
&lt;p&gt;Represents boolean true value.&lt;/p&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Boolean expressions evaluate to either true or false. In Monkey the operators True and False represent these two states.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/False&quot; title=&quot;False&quot;&gt;False&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#expressions&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Bool</title>
<link>http://blitz-wiki.appspot.com/Bool</link>
<guid>http://blitz-wiki.appspot.com/Bool</guid>
<pubDate>Wed, 1 Feb 2012 22:08:44 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Type Bool&lt;/h1&gt;
&lt;p&gt;The built-in boolean type.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Bool type is a fundamental monkey type used to express the result of conditional expressions, such as the comparison operators, and to represent a true/false &#39;state&#39; in general. A Bool can only contain the values True or False.&lt;/p&gt;
&lt;p&gt;Please see the Types section of the monkey language reference for more information on the boolean type.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#types&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Void</title>
<link>http://blitz-wiki.appspot.com/Void</link>
<guid>http://blitz-wiki.appspot.com/Void</guid>
<pubDate>Wed, 1 Feb 2012 22:56:01 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Return type Void&lt;/h1&gt;
&lt;p&gt;The built-in void return identifier.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Void is a special function/method return type, used where a function or method is not intended to return a value, but instead acts as a statement.&lt;/p&gt;
&lt;p&gt;The Void return type is only required in Strict mode where no value is being returned.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Int&quot; title=&quot;Int&quot;&gt;Int&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Float&quot; title=&quot;Float&quot;&gt;Float&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/String&quot; title=&quot;String&quot;&gt;String&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Bool&quot; title=&quot;Bool&quot;&gt;Bool&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Strict&quot; title=&quot;Strict&quot;&gt;Strict&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#functions&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Strict

&#39; Nothing is being returned by this function,
&#39; but we&#39;re in Strict mode so we specify the
&#39; Void return type.

Function SayHi:Void ()
&amp;nbsp;&amp;nbsp;Print &quot;Hi&quot;
End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Field</title>
<link>http://blitz-wiki.appspot.com/Field</link>
<guid>http://blitz-wiki.appspot.com/Field</guid>
<pubDate>Wed, 1 Feb 2012 22:55:14 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Field&lt;/h1&gt;
&lt;p&gt;Declares a class field variable.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Field &lt;em&gt;Identifier:Type&lt;/em&gt; [ = &lt;em&gt;Expression&lt;/em&gt; ]&lt;br /&gt;
Field &lt;em&gt;Identifier:&lt;/em&gt;= &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Field keyword declares an instance variable within a custom class. The field is valid for the lifetime of the object it belongs to.&lt;/p&gt;
&lt;p&gt;A field&#39;s default value upon object creation can be set in the field&#39;s declaration.&lt;/p&gt;
&lt;p&gt;To access an object&#39;s fields, use the syntax &lt;em&gt;object.field&lt;/em&gt;. (See example.)&lt;/p&gt;
&lt;p&gt;The alternative syntax provided allows the variable&#39;s type to be deduced from the expression.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Const&quot; title=&quot;Const&quot;&gt;Const&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Local&quot; title=&quot;Local&quot;&gt;Local&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Global&quot; title=&quot;Global&quot;&gt;Global&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#variables&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
&#39; Declaring class and fields

Class Player
&amp;nbsp;&amp;nbsp;Field name:String
&amp;nbsp;&amp;nbsp;Field points:Int = 0
End

&#39; Creating object &quot;p&quot; of type &quot;Player&quot;

Local p:Player = New Player

&#39; Accessing fields

p.name = &quot;Mary&quot;
p.points = 100

Print p.name
Print p.points
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Global</title>
<link>http://blitz-wiki.appspot.com/Global</link>
<guid>http://blitz-wiki.appspot.com/Global</guid>
<pubDate>Wed, 1 Feb 2012 22:54:57 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Global&lt;/h1&gt;
&lt;p&gt;Declares a global variable.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Global &lt;em&gt;Identifier:Type&lt;/em&gt; [ = &lt;em&gt;Expression&lt;/em&gt; ]&lt;br /&gt;
Global &lt;em&gt;Identifier:&lt;/em&gt;= &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Global keyword declares a permanent variable of a given type; this variable is accessible throughout the entire module scope. Global variables may be declared at module scope, or within a class declaration.&lt;/p&gt;
&lt;p&gt;The alternative syntax provided allows the variable&#39;s type to be deduced from the expression.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Const&quot; title=&quot;Const&quot;&gt;Const&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Local&quot; title=&quot;Local&quot;&gt;Local&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Field&quot; title=&quot;Field&quot;&gt;Field&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#variables&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Global Gravity:Float = 0.9
Global GameName:String = &quot;Gravity Dog&quot;
Global Player:MyObject = New MyObject
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Local</title>
<link>http://blitz-wiki.appspot.com/Local</link>
<guid>http://blitz-wiki.appspot.com/Local</guid>
<pubDate>Wed, 1 Feb 2012 22:54:38 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Local&lt;/h1&gt;
&lt;p&gt;Declares a local variable.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Local &lt;em&gt;Identifier:Type&lt;/em&gt; [ = &lt;em&gt;Expression&lt;/em&gt; ]&lt;br /&gt;
Local &lt;em&gt;Identifier:&lt;/em&gt;= &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Local keyword declares a temporary variable of a given type; this variable is valid only within the local scope in which it is declared.&lt;/p&gt;
&lt;p&gt;The alternative syntax provided allows the variable&#39;s type to be deduced from the expression.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Const&quot; title=&quot;Const&quot;&gt;Const&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Global&quot; title=&quot;Global&quot;&gt;Global&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Field&quot; title=&quot;Field&quot;&gt;Field&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#variables&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Local sausages:Int = 100
Local name:String = &quot;Bill&quot;
Local thing:MyObject = New MyObject
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Const</title>
<link>http://blitz-wiki.appspot.com/Const</link>
<guid>http://blitz-wiki.appspot.com/Const</guid>
<pubDate>Wed, 1 Feb 2012 22:53:58 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Const&lt;/h1&gt;
&lt;p&gt;Declares a constant value.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Const &lt;em&gt;Identifier:Type&lt;/em&gt; = &lt;em&gt;Expression&lt;/em&gt;&lt;br /&gt;
Const &lt;em&gt;Identifier:&lt;/em&gt;= &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Const keyword declares a constant value of a given type.&lt;/p&gt;
&lt;p&gt;The alternative syntax provided allows the variable&#39;s type to be deduced from the expression.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Local&quot; title=&quot;Local&quot;&gt;Local&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Global&quot; title=&quot;Global&quot;&gt;Global&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Field&quot; title=&quot;Field&quot;&gt;Field&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#constants&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Const EXAMPLE:Int = 100
Const NAME:String = &quot;Bill&quot;
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Extern</title>
<link>http://blitz-wiki.appspot.com/Extern</link>
<guid>http://blitz-wiki.appspot.com/Extern</guid>
<pubDate>Wed, 1 Feb 2012 22:53:30 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Directive Extern&lt;/h1&gt;
&lt;p&gt;External code directive.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Extern [Private]&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Extern directive is used to connect Monkey code to non-Monkey code. It lets you mix Monkey code (to be translated into the target platform language) with native target platform code.&lt;/p&gt;
&lt;p&gt;The optional Private modifier can be used to prevent external declarations from being visible outside the current module.&lt;/p&gt;
&lt;p&gt;For further information on Extern, please see the Extern section of the monkey language reference.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Public&quot; title=&quot;Public&quot;&gt;Public&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#extern&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Extern
&amp;nbsp;&amp;nbsp;&#39; External declarations

Public
&amp;nbsp;&amp;nbsp;&#39; Return to public declarations
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Import</title>
<link>http://blitz-wiki.appspot.com/Import</link>
<guid>http://blitz-wiki.appspot.com/Import</guid>
<pubDate>Wed, 1 Feb 2012 22:52:58 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Directive Import&lt;/h1&gt;
&lt;p&gt;Module import directive.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Import module&lt;em&gt;[.submodule]&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;A Monkey program consists of one or more modules, each of which is represented by a single source file; the name of the module is taken from the name of the source file. For example, if your file is named &quot;particles.monkey&quot; then the module will be called &quot;particles&quot;.&lt;/p&gt;
&lt;p&gt;A module may &#39;import&#39; other modules, gaining access to their declarations such as classes, functions, global variables, constants, etc. Imported modules in turn may import other modules, which may themselves import other modules, and so on.&lt;/p&gt;
&lt;p&gt;To import another module, the Import keyword must be placed at the top of your source file, but &lt;em&gt;after&lt;/em&gt; the Strict keyword if used.&lt;/p&gt;
&lt;p&gt;Monkey also supports cyclic imports, whereby modules can import each other, gaining access to each other&#39;s declarations.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Strict&quot; title=&quot;Strict&quot;&gt;Strict&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;Language_reference#modules&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;A common use case: importing the mojo module in a game application.&lt;/p&gt;
&lt;pre&gt;
Import mojo

Function Main ()
&amp;nbsp;&amp;nbsp;&#39; Game goes here!
End
&lt;/pre&gt;

&lt;p&gt;In Strict mode, Strict should be declared before any imports:&lt;/p&gt;
&lt;pre&gt;
Strict

Import mojo

Function Main:Int ()
&amp;nbsp;&amp;nbsp;&#39; Game goes here!
&amp;nbsp;&amp;nbsp;Return 0
End
&lt;/pre&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;This runnable two-part example shows a main module followed by a module to be imported. They should be saved as two separate files in the same folder.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Main module:&lt;/em&gt;
&lt;pre&gt;
&#39; Main module, save as, eg. mygame.monkey&lt;br /&gt;
Import hello&lt;br /&gt;
Function Main ()
&amp;nbsp;&amp;nbsp;SayHello
End
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Module to be imported:&lt;/em&gt;
&lt;pre&gt;
&#39; Save as hello.monkey&lt;br /&gt;
Function SayHello ()
&amp;nbsp;&amp;nbsp;Print &quot;Hello&quot;
End
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The main module, mygame, can now access the SayHello function of the imported &#39;hello&#39; module.&lt;/p&gt;
&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;p&gt;This two-part cyclic import example shows a main module, mygame, which imports multiple modules; each of these modules imports mygame in return.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Main module:&lt;/em&gt;
&lt;pre&gt;
&#39; Saved as mygame.monkey&lt;br /&gt;
Import player
Import rocket
Import bullet&lt;br /&gt;
Function Main ()
&amp;nbsp;&amp;nbsp;&#39; Game goes here!
End
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;At the top of player.monkey, rocket.monkey and bullet.monkey:&lt;/em&gt;
&lt;pre&gt;
Import mygame
&#39; ...
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Because the main module, mygame, imports player, rocket and bullet, each module importing mygame can access all declarations in player, rocket and bullet. Any new imports added to mygame will automatically become available.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Strict</title>
<link>http://blitz-wiki.appspot.com/Strict</link>
<guid>http://blitz-wiki.appspot.com/Strict</guid>
<pubDate>Wed, 1 Feb 2012 22:52:26 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Directive Strict&lt;/h1&gt;
&lt;p&gt;Enables monkey&#39;s Strict syntax mode.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Strict&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;By default, Monkey allows you to take certain shortcuts when programming. However, Monkey also offers a special Strict mode for programmers who prefer a stricter language definition.&lt;/p&gt;
&lt;p&gt;The differences between the Strict and non-Strict modes are:&lt;/p&gt;
&lt;h2&gt;Strict mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You must always specify the type of all variables, function return values and function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All function call parameters must be enclosed in brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function that does not return Void must end with a Return statement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Non-Strict mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variable type, function return type and function parameter types can be optionally omitted. In this case they will default to Int.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return statements can be omitted at the end of a function. In this case, a Return statement will be automatically generated that will return an appropriate default value for the function type. That is, False for bool, 0 for int and float, &quot;&quot; for string, [] for arrays and Null for objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The brackets around function call parameters are optional if the function is being used as a statement, or if the function can be called with no parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use Strict mode, the Strict directive must be placed at the very top of your module. Note that Strict is applied on a per-module basis and that Strict and non-Strict modules can legitimately import each other.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;While syntax is shown in Strict mode, the examples in this documentation will normally be presented in non-Strict form.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=Return&amp;{FORMAT}&quot; title=&quot;Return (create)&quot;&gt;Return&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Int&quot; title=&quot;Int&quot;&gt;Int&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Float&quot; title=&quot;Float&quot;&gt;Float&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/String&quot; title=&quot;String&quot;&gt;String&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Bool&quot; title=&quot;Bool&quot;&gt;Bool&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Void&quot; title=&quot;Void&quot;&gt;Void&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Strict

&#39; In Strict mode...

Function Main:Int()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39; the :Int type definition is compulsory...
&amp;nbsp;&amp;nbsp;Print( &quot;Strict mode is...different!&quot; )&amp;nbsp;&amp;nbsp;&#39; all function calls require brackets...
&amp;nbsp;&amp;nbsp;Return 0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39; and we MUST return a value.
End
&lt;/pre&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;pre&gt;
&#39; Non-Strict version of first example, declaring no Return
&#39; type, no brackets for Print statement and no Return value.

Function Main ()
&amp;nbsp;&amp;nbsp;Print &quot;Non-Strict mode is...forgiving!&quot;
End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>LoadImageData</title>
<link>http://blitz-wiki.appspot.com/LoadImageData</link>
<guid>http://blitz-wiki.appspot.com/LoadImageData</guid>
<pubDate>Fri, 27 Jan 2012 00:47:04 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function LoadImageData&lt;/h1&gt;
&lt;p&gt;Load image data into a databuffer.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/The_opengl_module&quot; title=&quot;The opengl module&quot;&gt;opengl&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function LoadImageData:DataBuffer( path:String,info:Int[] )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;path - path to image to load.&lt;/p&gt;
&lt;p&gt;info - an array to receive image info.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;LoadImageData is a helper function that loads an image in your app&#39;s .data directory into a databuffer.&lt;/p&gt;
&lt;p&gt;Upon success, info[0] is initialized to the width of the image, and info[1] is initialized to the height of the image. If the info array is not long enough, info is not written.&lt;/p&gt;
&lt;p&gt;The image is returned in tightly packed, byte-per-component R,G,B,A format.&lt;/p&gt;
&lt;p&gt;IMPORTANT: LoadImageData is not currently available on the HTML5 target.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Jungle</title>
<link>http://blitz-wiki.appspot.com/Jungle</link>
<guid>http://blitz-wiki.appspot.com/Jungle</guid>
<pubDate>Fri, 27 Jan 2012 00:27:22 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;JUNGLEide&lt;/h1&gt;
&lt;p&gt;Jungle Ide is an integrated development environment developed by &lt;a href=&quot;http://www.lemonbytes.com/&quot;&gt;LemonBytes&lt;/a&gt;. It is a software application that provides comprehensive facilities to programmers for applications and games development.&lt;/p&gt;
&lt;p&gt;Please visit the &lt;a href=&quot;http://www.jungleide.com/&quot;&gt;JUNGLEide&lt;/a&gt; website for more information.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>MServer</title>
<link>http://blitz-wiki.appspot.com/MServer</link>
<guid>http://blitz-wiki.appspot.com/MServer</guid>
<pubDate>Fri, 27 Jan 2012 00:23:31 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The MServer app&lt;/h1&gt;
&lt;p&gt;MServer is a simple, lightweight web server for testing HTML5 apps.&lt;/p&gt;
&lt;p&gt;MServer is automatically used by &lt;a class=&quot;int&quot; href=&quot;/Trans&quot; title=&quot;Trans&quot;&gt;Trans&lt;/a&gt; (and therefore &lt;a class=&quot;int&quot; href=&quot;/Monk&quot; title=&quot;Monk&quot;&gt;Monk&lt;/a&gt; and &lt;a class=&quot;int&quot; href=&quot;/Jungle&quot; title=&quot;Jungle&quot;&gt;Jungle&lt;/a&gt;) when you &#39;run&#39; an html5 app, so you don&#39;t normally need to worry about it.&lt;/p&gt;
&lt;p&gt;However, if you want to manually run an HTML5 app yourself, you can use MServer directly:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;monkey_dir&lt;/em&gt;&lt;code&gt;\bin\mserver_winnt&lt;/code&gt; &lt;em&gt;path_to_html_file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;...for Windows, or for MacOS...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open&lt;/code&gt; &lt;em&gt;monkey_dir&lt;/em&gt;&lt;code&gt;/bin/mserver_macos&lt;/code&gt; &lt;em&gt;path_to_html_file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mserver will run the given html file using the default OS browser.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\monkey\bin\mserver_winnt MonkeyGame.html&lt;/code&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>GLES20</title>
<link>http://blitz-wiki.appspot.com/GLES20</link>
<guid>http://blitz-wiki.appspot.com/GLES20</guid>
<pubDate>Thu, 2 Feb 2012 05:43:05 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;GLES20&lt;/h1&gt;
&lt;p&gt;The OpenGL ES 2.0 module.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The gles20 module provides a Monkey wrapper for the OpenGL ES 2.0 API on the android, glfw, html5 and ios targets.&lt;/p&gt;
&lt;p&gt;The Monkey API is based on the &#39;C&#39; API, with a few modifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The glGen and glDelete functions have been replaced with WebGL style glCreate and glDelete functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monkey arrays are used to represent typed pointer parameters. It is up to you to ensure such arrays are large enough for the function being called - you should assume no runtime checking is performed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DataBuffer objects are used to represent void pointer parameters. Again, it is up to you to ensure such databuffers are large enough for the function being called.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Versions of glTexImage that take image file paths have been added to all targets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To import the gles20 module into your app, use: &lt;code&gt;Import opengl.gles20&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The opengl modules currently depend on the the mojo module to create and manage opengl contexts, so you must also import mojo.&lt;/p&gt;
&lt;h2&gt;HTML5 notes&lt;/h2&gt;
&lt;p&gt;You will need a web browser that supports WebGL.&lt;/p&gt;
&lt;p&gt;Client side arrays are not supported in WebGL, so the versions of glVertexAttribPointer and glDrawElements that take a DataBuffer parameter are also not supported. You must use vertex buffer objects for vertex and index data on the HTML5 target. &lt;/p&gt;
&lt;p&gt;LoadImageData is not supported on HTML5, so the only way you can load an image file into a texture is by using the versions of glTexImage that take an image path parameter.&lt;/p&gt;
&lt;h2&gt;Android notes&lt;/h2&gt;
&lt;p&gt;GLES2.0 is only available on API 8 or higher. In addition, if you want to target API 8 (Android 2.2 &#39;Froyo&#39;) and want to use vertex buffer objects, you must set the app config setting &quot;ANDROID_NATIVE_GL_ENABLED&quot; to &quot;true&quot;. This will cause some &#39;native code&#39; to be added to your app that works around an issue in Android API 8. Note that this is not necessary if you are targeting API 9 or higher.&lt;/p&gt;
&lt;h2&gt;GLFW notes&lt;/h2&gt;
&lt;p&gt;Your graphics driver must support OpenGL2.0 or higher.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadImageData&quot; title=&quot;LoadImageData&quot;&gt;LoadImageData&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/App_config_settings&quot; title=&quot;App config settings&quot;&gt;App config settings&lt;/a&gt; &lt;a href=&quot;http://www.khronos.org/opengles/sdk/docs/man/&quot;&gt;OpenGL ES 2.0 reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;API reference&lt;/h2&gt;
&lt;pre&gt;
Const GL_DEPTH_BUFFER_BIT               =$00000100
Const GL_STENCIL_BUFFER_BIT             =$00000400
Const GL_COLOR_BUFFER_BIT               =$00004000
Const GL_FALSE                          =0
Const GL_TRUE                           =1
Const GL_POINTS                         =$0000
Const GL_LINES                          =$0001
Const GL_LINE_LOOP                      =$0002
Const GL_LINE_STRIP                     =$0003
Const GL_TRIANGLES                      =$0004
Const GL_TRIANGLE_STRIP                 =$0005
Const GL_TRIANGLE_FAN                   =$0006
Const GL_ZERO                           =0
Const GL_ONE                            =1
Const GL_SRC_COLOR                      =$0300
Const GL_ONE_MINUS_SRC_COLOR            =$0301
Const GL_SRC_ALPHA                      =$0302
Const GL_ONE_MINUS_SRC_ALPHA            =$0303
Const GL_DST_ALPHA                      =$0304
Const GL_ONE_MINUS_DST_ALPHA            =$0305
Const GL_DST_COLOR                      =$0306
Const GL_ONE_MINUS_DST_COLOR            =$0307
Const GL_SRC_ALPHA_SATURATE             =$0308
Const GL_FUNC_ADD                       =$8006
Const GL_BLEND_EQUATION                 =$8009
Const GL_BLEND_EQUATION_RGB             =$8009
Const GL_BLEND_EQUATION_ALPHA           =$883D
Const GL_FUNC_SUBTRACT                  =$800A
Const GL_FUNC_REVERSE_SUBTRACT          =$800B
Const GL_BLEND_DST_RGB                  =$80C8
Const GL_BLEND_SRC_RGB                  =$80C9
Const GL_BLEND_DST_ALPHA                =$80CA
Const GL_BLEND_SRC_ALPHA                =$80CB
Const GL_CONSTANT_COLOR                 =$8001
Const GL_ONE_MINUS_CONSTANT_COLOR       =$8002
Const GL_CONSTANT_ALPHA                 =$8003
Const GL_ONE_MINUS_CONSTANT_ALPHA       =$8004
Const GL_BLEND_COLOR                    =$8005
Const GL_ARRAY_BUFFER                   =$8892
Const GL_ELEMENT_ARRAY_BUFFER           =$8893
Const GL_ARRAY_BUFFER_BINDING           =$8894
Const GL_ELEMENT_ARRAY_BUFFER_BINDING   =$8895
Const GL_STREAM_DRAW                    =$88E0
Const GL_STATIC_DRAW                    =$88E4
Const GL_DYNAMIC_DRAW                   =$88E8
Const GL_BUFFER_SIZE                    =$8764
Const GL_BUFFER_USAGE                   =$8765
Const GL_CURRENT_VERTEX_ATTRIB          =$8626
Const GL_FRONT                          =$0404
Const GL_BACK                           =$0405
Const GL_FRONT_AND_BACK                 =$0408
Const GL_TEXTURE_2D                     =$0DE1
Const GL_CULL_FACE                      =$0B44
Const GL_BLEND                          =$0BE2
Const GL_DITHER                         =$0BD0
Const GL_STENCIL_TEST                   =$0B90
Const GL_DEPTH_TEST                     =$0B71
Const GL_SCISSOR_TEST                   =$0C11
Const GL_POLYGON_OFFSET_FILL            =$8037
Const GL_SAMPLE_ALPHA_TO_COVERAGE       =$809E
Const GL_SAMPLE_COVERAGE                =$80A0
Const GL_NO_ERROR                       =0
Const GL_INVALID_ENUM                   =$0500
Const GL_INVALID_VALUE                  =$0501
Const GL_INVALID_OPERATION              =$0502
Const GL_OUT_OF_MEMORY                  =$0505
Const GL_CW                             =$0900
Const GL_CCW                            =$0901
Const GL_LINE_WIDTH                     =$0B21
Const GL_ALIASED_POINT_SIZE_RANGE       =$846D
Const GL_ALIASED_LINE_WIDTH_RANGE       =$846E
Const GL_CULL_FACE_MODE                 =$0B45
Const GL_FRONT_FACE                     =$0B46
Const GL_DEPTH_RANGE                    =$0B70
Const GL_DEPTH_WRITEMASK                =$0B72
Const GL_DEPTH_CLEAR_VALUE              =$0B73
Const GL_DEPTH_FUNC                     =$0B74
Const GL_STENCIL_CLEAR_VALUE            =$0B91
Const GL_STENCIL_FUNC                   =$0B92
Const GL_STENCIL_FAIL                   =$0B94
Const GL_STENCIL_PASS_DEPTH_FAIL        =$0B95
Const GL_STENCIL_PASS_DEPTH_PASS        =$0B96
Const GL_STENCIL_REF                    =$0B97
Const GL_STENCIL_VALUE_MASK             =$0B93
Const GL_STENCIL_WRITEMASK              =$0B98
Const GL_STENCIL_BACK_FUNC              =$8800
Const GL_STENCIL_BACK_FAIL              =$8801
Const GL_STENCIL_BACK_PASS_DEPTH_FAIL   =$8802
Const GL_STENCIL_BACK_PASS_DEPTH_PASS   =$8803
Const GL_STENCIL_BACK_REF               =$8CA3
Const GL_STENCIL_BACK_VALUE_MASK        =$8CA4
Const GL_STENCIL_BACK_WRITEMASK         =$8CA5
Const GL_VIEWPORT                       =$0BA2
Const GL_SCISSOR_BOX                    =$0C10
Const GL_COLOR_CLEAR_VALUE              =$0C22
Const GL_COLOR_WRITEMASK                =$0C23
Const GL_UNPACK_ALIGNMENT               =$0CF5
Const GL_PACK_ALIGNMENT                 =$0D05
Const GL_MAX_TEXTURE_SIZE               =$0D33
Const GL_MAX_VIEWPORT_DIMS              =$0D3A
Const GL_SUBPIXEL_BITS                  =$0D50
Const GL_RED_BITS                       =$0D52
Const GL_GREEN_BITS                     =$0D53
Const GL_BLUE_BITS                      =$0D54
Const GL_ALPHA_BITS                     =$0D55
Const GL_DEPTH_BITS                     =$0D56
Const GL_STENCIL_BITS                   =$0D57
Const GL_POLYGON_OFFSET_UNITS           =$2A00
Const GL_POLYGON_OFFSET_FACTOR          =$8038
Const GL_TEXTURE_BINDING_2D             =$8069
Const GL_SAMPLE_BUFFERS                 =$80A8
Const GL_SAMPLES                        =$80A9
Const GL_SAMPLE_COVERAGE_VALUE          =$80AA
Const GL_SAMPLE_COVERAGE_INVERT         =$80AB
Const GL_NUM_COMPRESSED_TEXTURE_FORMATS =$86A2
Const GL_COMPRESSED_TEXTURE_FORMATS     =$86A3
Const GL_DONT_CARE                      =$1100
Const GL_FASTEST                        =$1101
Const GL_NICEST                         =$1102
Const GL_GENERATE_MIPMAP_HINT            =$8192
Const GL_BYTE                           =$1400
Const GL_UNSIGNED_BYTE                  =$1401
Const GL_SHORT                          =$1402
Const GL_UNSIGNED_SHORT                 =$1403
Const GL_INT                            =$1404
Const GL_UNSIGNED_INT                   =$1405
Const GL_FLOAT                          =$1406
Const GL_FIXED                          =$140C
Const GL_DEPTH_COMPONENT                =$1902
Const GL_ALPHA                          =$1906
Const GL_RGB                            =$1907
Const GL_RGBA                           =$1908
Const GL_LUMINANCE                      =$1909
Const GL_LUMINANCE_ALPHA                =$190A
Const GL_UNSIGNED_SHORT_4_4_4_4         =$8033
Const GL_UNSIGNED_SHORT_5_5_5_1         =$8034
Const GL_UNSIGNED_SHORT_5_6_5           =$8363
Const GL_FRAGMENT_SHADER                  =$8B30
Const GL_VERTEX_SHADER                    =$8B31
Const GL_MAX_VERTEX_ATTRIBS               =$8869
Const GL_MAX_VERTEX_UNIFORM_VECTORS       =$8DFB
Const GL_MAX_VARYING_VECTORS              =$8DFC
Const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS =$8B4D
Const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS   =$8B4C
Const GL_MAX_TEXTURE_IMAGE_UNITS          =$8872
Const GL_MAX_FRAGMENT_UNIFORM_VECTORS     =$8DFD
Const GL_SHADER_TYPE                      =$8B4F
Const GL_DELETE_STATUS                    =$8B80
Const GL_LINK_STATUS                      =$8B82
Const GL_VALIDATE_STATUS                  =$8B83
Const GL_ATTACHED_SHADERS                 =$8B85
Const GL_ACTIVE_UNIFORMS                  =$8B86
Const GL_ACTIVE_UNIFORM_MAX_LENGTH        =$8B87
Const GL_ACTIVE_ATTRIBUTES                =$8B89
Const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH      =$8B8A
Const GL_SHADING_LANGUAGE_VERSION         =$8B8C
Const GL_CURRENT_PROGRAM                  =$8B8D
Const GL_NEVER                          =$0200
Const GL_LESS                           =$0201
Const GL_EQUAL                          =$0202
Const GL_LEQUAL                         =$0203
Const GL_GREATER                        =$0204
Const GL_NOTEQUAL                       =$0205
Const GL_GEQUAL                         =$0206
Const GL_ALWAYS                         =$0207
Const GL_KEEP                           =$1E00
Const GL_REPLACE                        =$1E01
Const GL_INCR                           =$1E02
Const GL_DECR                           =$1E03
Const GL_INVERT                         =$150A
Const GL_INCR_WRAP                      =$8507
Const GL_DECR_WRAP                      =$8508
Const GL_VENDOR                         =$1F00
Const GL_RENDERER                       =$1F01
Const GL_VERSION                        =$1F02
Const GL_EXTENSIONS                     =$1F03
Const GL_NEAREST                        =$2600
Const GL_LINEAR                         =$2601
Const GL_NEAREST_MIPMAP_NEAREST         =$2700
Const GL_LINEAR_MIPMAP_NEAREST          =$2701
Const GL_NEAREST_MIPMAP_LINEAR          =$2702
Const GL_LINEAR_MIPMAP_LINEAR           =$2703
Const GL_TEXTURE_MAG_FILTER             =$2800
Const GL_TEXTURE_MIN_FILTER             =$2801
Const GL_TEXTURE_WRAP_S                 =$2802
Const GL_TEXTURE_WRAP_T                 =$2803
Const GL_TEXTURE                        =$1702
Const GL_TEXTURE_CUBE_MAP               =$8513
Const GL_TEXTURE_BINDING_CUBE_MAP       =$8514
Const GL_TEXTURE_CUBE_MAP_POSITIVE_X    =$8515
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_X    =$8516
Const GL_TEXTURE_CUBE_MAP_POSITIVE_Y    =$8517
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    =$8518
Const GL_TEXTURE_CUBE_MAP_POSITIVE_Z    =$8519
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    =$851A
Const GL_MAX_CUBE_MAP_TEXTURE_SIZE      =$851C
Const GL_TEXTURE0                       =$84C0
Const GL_TEXTURE1                       =$84C1
Const GL_TEXTURE2                       =$84C2
Const GL_TEXTURE3                       =$84C3
Const GL_TEXTURE4                       =$84C4
Const GL_TEXTURE5                       =$84C5
Const GL_TEXTURE6                       =$84C6
Const GL_TEXTURE7                       =$84C7
Const GL_TEXTURE8                       =$84C8
Const GL_TEXTURE9                       =$84C9
Const GL_TEXTURE10                      =$84CA
Const GL_TEXTURE11                      =$84CB
Const GL_TEXTURE12                      =$84CC
Const GL_TEXTURE13                      =$84CD
Const GL_TEXTURE14                      =$84CE
Const GL_TEXTURE15                      =$84CF
Const GL_TEXTURE16                      =$84D0
Const GL_TEXTURE17                      =$84D1
Const GL_TEXTURE18                      =$84D2
Const GL_TEXTURE19                      =$84D3
Const GL_TEXTURE20                      =$84D4
Const GL_TEXTURE21                      =$84D5
Const GL_TEXTURE22                      =$84D6
Const GL_TEXTURE23                      =$84D7
Const GL_TEXTURE24                      =$84D8
Const GL_TEXTURE25                      =$84D9
Const GL_TEXTURE26                      =$84DA
Const GL_TEXTURE27                      =$84DB
Const GL_TEXTURE28                      =$84DC
Const GL_TEXTURE29                      =$84DD
Const GL_TEXTURE30                      =$84DE
Const GL_TEXTURE31                      =$84DF
Const GL_ACTIVE_TEXTURE                 =$84E0
Const GL_REPEAT                         =$2901
Const GL_CLAMP_TO_EDGE                  =$812F
Const GL_MIRRORED_REPEAT                =$8370
Const GL_FLOAT_VEC2                     =$8B50
Const GL_FLOAT_VEC3                     =$8B51
Const GL_FLOAT_VEC4                     =$8B52
Const GL_INT_VEC2                       =$8B53
Const GL_INT_VEC3                       =$8B54
Const GL_INT_VEC4                       =$8B55
Const GL_BOOL                           =$8B56
Const GL_BOOL_VEC2                      =$8B57
Const GL_BOOL_VEC3                      =$8B58
Const GL_BOOL_VEC4                      =$8B59
Const GL_FLOAT_MAT2                     =$8B5A
Const GL_FLOAT_MAT3                     =$8B5B
Const GL_FLOAT_MAT4                     =$8B5C
Const GL_SAMPLER_2D                     =$8B5E
Const GL_SAMPLER_CUBE                   =$8B60
Const GL_VERTEX_ATTRIB_ARRAY_ENABLED        =$8622
Const GL_VERTEX_ATTRIB_ARRAY_SIZE           =$8623
Const GL_VERTEX_ATTRIB_ARRAY_STRIDE         =$8624
Const GL_VERTEX_ATTRIB_ARRAY_TYPE           =$8625
Const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED     =$886A
Const GL_VERTEX_ATTRIB_ARRAY_POINTER        =$8645
Const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING =$889F
Const GL_IMPLEMENTATION_COLOR_READ_TYPE   =$8B9A
Const GL_IMPLEMENTATION_COLOR_READ_FORMAT =$8B9B
Const GL_COMPILE_STATUS                 =$8B81
Const GL_INFO_LOG_LENGTH                =$8B84
Const GL_SHADER_SOURCE_LENGTH           =$8B88
Const GL_SHADER_COMPILER                =$8DFA
Const GL_SHADER_BINARY_FORMATS          =$8DF8
Const GL_NUM_SHADER_BINARY_FORMATS      =$8DF9
Const GL_LOW_FLOAT                      =$8DF0
Const GL_MEDIUM_FLOAT                   =$8DF1
Const GL_HIGH_FLOAT                     =$8DF2
Const GL_LOW_INT                        =$8DF3
Const GL_MEDIUM_INT                     =$8DF4
Const GL_HIGH_INT                       =$8DF5
Const GL_FRAMEBUFFER                    =$8D40
Const GL_RENDERBUFFER                   =$8D41
Const GL_RGBA4                          =$8056
Const GL_RGB5_A1                        =$8057
Const GL_RGB565                         =$8D62
Const GL_DEPTH_COMPONENT16              =$81A5
Const GL_STENCIL_INDEX                  =$1901
Const GL_STENCIL_INDEX8                 =$8D48
Const GL_RENDERBUFFER_WIDTH             =$8D42
Const GL_RENDERBUFFER_HEIGHT            =$8D43
Const GL_RENDERBUFFER_INTERNAL_FORMAT   =$8D44
Const GL_RENDERBUFFER_RED_SIZE          =$8D50
Const GL_RENDERBUFFER_GREEN_SIZE        =$8D51
Const GL_RENDERBUFFER_BLUE_SIZE         =$8D52
Const GL_RENDERBUFFER_ALPHA_SIZE        =$8D53
Const GL_RENDERBUFFER_DEPTH_SIZE        =$8D54
Const GL_RENDERBUFFER_STENCIL_SIZE      =$8D55
Const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           =$8CD0
Const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           =$8CD1
Const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         =$8CD2
Const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE =$8CD3
Const GL_COLOR_ATTACHMENT0              =$8CE0
Const GL_DEPTH_ATTACHMENT               =$8D00
Const GL_STENCIL_ATTACHMENT             =$8D20
Const GL_NONE                           =0
Const GL_FRAMEBUFFER_COMPLETE                      =$8CD5
Const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT         =$8CD6
Const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT =$8CD7
Const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS         =$8CD9
Const GL_FRAMEBUFFER_UNSUPPORTED                   =$8CDD
Const GL_FRAMEBUFFER_BINDING            =$8CA6
Const GL_RENDERBUFFER_BINDING           =$8CA7
Const GL_MAX_RENDERBUFFER_SIZE          =$84E8
Const GL_INVALID_FRAMEBUFFER_OPERATION  =$0506
Function glActiveTexture:Void( texture )
Function glAttachShader:Void( program, shader )
Function glBindAttribLocation:Void( program, index, name$ )
Function glBindBuffer:Void( target, buffer )
Function glBindFramebuffer:Void( target, framebuffer )
Function glBindRenderbuffer:Void( target, renderbuffer )
Function glBindTexture:Void( target, texture )
Function glBlendColor:Void( red#, green#, blue#, alpha# )
Function glBlendEquation:Void(  mode  )
Function glBlendEquationSeparate:Void( modeRGB, modeAlpha )
Function glBlendFunc:Void( sfactor, dfactor )
Function glBlendFuncSeparate:Void( srcRGB, dstRGB, srcAlpha, dstAlpha )
Function glBufferData:Void( target, size, data:DataBuffer, usage )
Function glBufferSubData:Void( target, offset, size, data:DataBuffer )
Function glCheckFramebufferStatus:Int( target )
Function glClear:Void( mask )
Function glClearColor:Void( red#, green#, blue#, alpha# )
Function glClearDepthf:Void( depth# )
Function glClearStencil:Void( s )
Function glColorMask:Void( red?, green?, blue?, alpha? )
Function glCompileShader:Void( shader )
Function glCopyTexImage2D:Void( target, level, internalformat, x, y, width, height, border )
Function glCopyTexSubImage2D:Void( target, level, xoffset, yoffset, x, y, width, height )
Function glCreateBuffer:Int()
Function glCreateFrameBuffer:Int()
Function glCreateRenderBuffer:Int()
Function glCreateTexture:Int()
Function glCreateProgram:Int()
Function glCreateShader:Int( type )
Function glDeleteBuffer:Void( buffer )
Function glDeleteFramebuffer:Void( framebuffer )
Function glDeleteRenderbuffer:Void( renderBuffer )
Function glDeleteTexture:Void( texture )
Function glDeleteProgram:Void( program )
Function glDeleteShader:Void( shader )
Function glCullFace:Void( mode )
Function glDepthFunc:Void( func )
Function glDepthMask:Void( flag? )
Function glDepthRangef:Void( zNear#, zFar# )
Function glDetachShader:Void( program, shader )
Function glDisable:Void( cap )
Function glDisableVertexAttribArray:Void( index )
Function glDrawArrays:Void( mode, first, count )
Function glDrawElements:Void( mode, count, type, ptr:DataBuffer )
Function glDrawElements:Void( mode, count, type, offset )
Function glEnable:Void( cap )
Function glEnableVertexAttribArray:Void( index )
Function glFinish:Void()
Function glFlush:Void()
Function glFramebufferRenderbuffer:Void( target, attachment, renderbuffertarget, renderbuffer )
Function glFramebufferTexture2D:Void( target, attachment, textarget, texture, level )
Function glFrontFace:Void( mode )
Function glGenerateMipmap:Void( target )
Function glGetActiveAttrib:Void( program, index, size[], type[], name$[] )
Function glGetActiveUniform:Void( program, index, size[], type[], name$[] )
Function glGetAttachedShaders:Void( program, maxcount, count[], shaders[] )
Function glGetAttribLocation:Int( program, name$ )
Function glGetBooleanv:Void( pname, params?[] )
Function glGetBufferParameteriv:Void( target, pname, params[] )
Function glGetError:Int()
Function glGetFloatv:Void( pname, params#[] )
Function glGetFramebufferAttachmentParameteriv:Void( target, attachment, pname, params[] )
Function glGetIntegerv:Void( pname, params[] )
Function glGetProgramiv:Void( program, pname, params[] )
Function glGetProgramInfoLog:String( program )
Function glGetRenderbufferParameteriv:Void( target, pname, params[] )
Function glGetShaderiv:Void( shader, pname, params[] )
Function glGetShaderInfoLog:String( shader )
Function glGetShaderSource:String( shader )
Function glGetString:String( name )
Function glGetTexParameterfv:Void( target, pname, params#[] )
Function glGetTexParameteriv:Void( target, pname, params[] )
Function glGetUniformfv:Void( program, location, params#[] )
Function glGetUniformiv:Void( program, location, params[] )
Function glGetUniformLocation:Int( program, name$ )
Function glGetVertexAttribfv:Void( index, pname, params#[] )
Function glGetVertexAttribiv:Void( index, pname, params[] )
Function glHint:Void( target, mode )
Function glIsBuffer:Bool( buffer )
Function glIsEnabled:Bool( cap )
Function glIsFramebuffer:Bool( framebuffer )
Function glIsProgram:Bool( program )
Function glIsRenderbuffer:Bool( renderbuffer )
Function glIsShader:Bool( shader )
Function glIsTexture:Bool( texture )
Function glLineWidth:Bool( width# )
Function glLinkProgram:Void( program )
Function glPixelStorei:Void( pname, param )
Function glPolygonOffset:Void( factor#, units# )
Function glReadPixels:Void( x, y, width, height, format, type, pixels:DataBuffer )
Function glReleaseShaderCompiler:Void()
Function glRenderbufferStorage:Void( target, internalformat, width, height )
Function glSampleCoverage:Void( value#, invert? )
Function glScissor:Void( x, y, width, height )
Function glShaderSource:Void( shader, source$ )
Function glStencilFunc:Void( func, ref, mask )
Function glStencilFuncSeparate:Void( face, func, ref, mask )
Function glStencilMask:Void( mask )
Function glStencilMaskSeparate:Void( face, mask )
Function glStencilOp:Void( fail, zfail, zpass )
Function glStencilOpSeparate:Void( face, fail, zfail, zpass )
Function glTexImage2D:Void( target, level, internalformat, format, type, path:String )
Function glTexImage2D:Void( target, level, internalformat, width, height, border, format, type, pixels:DataBuffer )
Function glTexSubImage2D:Void( target, level, xoffset, yoffset, format, type, path:String )
Function glTexSubImage2D:Void( target, level, xoffset, yoffset, width, height, format, type, pixels:DataBuffer )
Function glTexParameterf:Void( target, pname, param# )
Function glTexParameteri:Void( target, pname, param )
Function glUniform1f:Void( location, x# )
Function glUniform1i:Void( location, x )
Function glUniform2f:Void( location, x#, y# )
Function glUniform2i:Void( location, x, y )
Function glUniform3f:Void( location, x#, y#, z# )
Function glUniform3i:Void( location, x, y, z )
Function glUniform4f:Void( location, x#, y#, z#, w# )
Function glUniform4i:Void( location, x, y, z, w )
Function glUniform1fv:Void( location, count, v#[] )
Function glUniform1iv:Void( location, count, v[] )
Function glUniform2fv:Void( location, count, v#[] )
Function glUniform2iv:Void( location, count, v[] )
Function glUniform3fv:Void( location, count, v#[] )
Function glUniform3iv:Void( location, count, v[] )
Function glUniform4fv:Void( location, count, v#[] )
Function glUniform4iv:Void( location, count, v[] )
Function glUniformMatrix2fv:Void( location, count, transpose?, value#[] )
Function glUniformMatrix3fv:Void( location, count, transpose?, value#[] )
Function glUniformMatrix4fv:Void( location, count, transpose?, value#[] )
Function glUseProgram:Void( program )
Function glValidateProgram:Void( program )
Function glVertexAttrib1f:Void( indx, x# )
Function glVertexAttrib2f:Void( indx, x#, y# )
Function glVertexAttrib3f:Void( indx, x#, y#, z# )
Function glVertexAttrib4f:Void( indx, x#, y#, z#, w# )
Function glVertexAttrib1fv:Void( indx, values#[] )
Function glVertexAttrib2fv:Void( indx, values#[] )
Function glVertexAttrib3fv:Void( indx, values#[] )
Function glVertexAttrib4fv:Void( indx, values#[] )
Function glVertexAttribPointer:Void( indx, size, type, normalized?, stride, data:DataBuffer )
Function glVertexAttribPointer:Void( indx, size, type, normalized?, stride, offset )
Function glViewport:Void( x, y, width, height )
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Map.Add</title>
<link>http://blitz-wiki.appspot.com/Map.Add</link>
<guid>http://blitz-wiki.appspot.com/Map.Add</guid>
<pubDate>Thu, 26 Jan 2012 23:10:28 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method Add&lt;/h1&gt;
&lt;p&gt;Add a key/value pair to map.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/Map&quot; title=&quot;Map&quot;&gt;Map&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method Add:Bool( key:K,value:V )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;key, value - key/value pair to add to map.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Adds a key/value pair to the map.&lt;/p&gt;
&lt;p&gt;The map is only modified if it does not already contain the given key, in which case a new key/value association is created and true is returned.&lt;/p&gt;
&lt;p&gt;If the map already contains key, it is not modified and false is returned.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Map.Set&quot; title=&quot;Map.Set&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Map.Get&quot; title=&quot;Map.Get&quot;&gt;Get&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>monkey.map</title>
<link>http://blitz-wiki.appspot.com/monkey.map</link>
<guid>http://blitz-wiki.appspot.com/monkey.map</guid>
<pubDate>Thu, 26 Jan 2012 22:02:08 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;monkey.map&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;monkey.map&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>JoyZ</title>
<link>http://blitz-wiki.appspot.com/JoyZ</link>
<guid>http://blitz-wiki.appspot.com/JoyZ</guid>
<pubDate>Thu, 26 Jan 2012 21:58:26 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function JoyZ&lt;/h1&gt;
&lt;p&gt;Get z state of joystick.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/mojo.input&quot; title=&quot;mojo.input&quot;&gt;mojo.input&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function JoyZ:Float( index:Int=0 )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;index - 0 or 1.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;On Playstation/Xbox style controllers, JoyZ returns the state of the analog shoulder controls.&lt;/p&gt;
&lt;p&gt;The returned value will be in the range 0 to 1, with 0 indicating &#39;unpressed&#39; and 1 indicating &#39;fully pressed&#39;.&lt;/p&gt;
&lt;p&gt;The index parameter should be 0 for the left handler shoulder control, or 1 for the right hand shoulder control.&lt;/p&gt;
&lt;p&gt;Note: On the XNA target, JoyX, JoyY and JoyZ will all return 0 until a joystick button is pressed. This is to comply with xbox live publishing guidelines that state that it must be possible to use any of the 4 controllers to play a game. Mojo will therefore wait until a controller button is pressed (usually in response to a &#39;press button to start&#39; style message on the title page) before deciding which controller is in use.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>JoyY</title>
<link>http://blitz-wiki.appspot.com/JoyY</link>
<guid>http://blitz-wiki.appspot.com/JoyY</guid>
<pubDate>Thu, 26 Jan 2012 21:52:53 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function JoyY&lt;/h1&gt;
&lt;p&gt;Get y state of joystick.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/mojo.input&quot; title=&quot;mojo.input&quot;&gt;mojo.input&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function JoyY:Float( index:Int=0 )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;index - 0 or 1.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the y, or vertical, state of a joystick.&lt;/p&gt;
&lt;p&gt;The return value will be in the range -1 to +1, with -1 representing &#39;down&#39; and +1 representing &#39;up&#39;.&lt;/p&gt;
&lt;p&gt;In the case of controllers with 2 joysticks, the index parameter should be 0 for the left hand joystick, or 1 for the right hand joystick.&lt;/p&gt;
&lt;p&gt;Note: On the XNA target, JoyX, JoyY and JoyZ will all return 0 until a joystick button is pressed. This is to comply with xbox live publishing guidelines that state that it must be possible to use any of the 4 controllers to play a game. Mojo will therefore wait until a button is pressed (usually in response to a &#39;press button to start&#39; style message on the title page) before deciding which controller is in use.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>mojo.input</title>
<link>http://blitz-wiki.appspot.com/mojo.input</link>
<guid>http://blitz-wiki.appspot.com/mojo.input</guid>
<pubDate>Thu, 26 Jan 2012 21:51:46 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;mojo.input&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;mojo.input&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>JoyX</title>
<link>http://blitz-wiki.appspot.com/JoyX</link>
<guid>http://blitz-wiki.appspot.com/JoyX</guid>
<pubDate>Thu, 26 Jan 2012 21:51:34 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function JoyX&lt;/h1&gt;
&lt;p&gt;Get x state of joystick.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/mojo.input&quot; title=&quot;mojo.input&quot;&gt;mojo.input&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function JoyX:Float( index:Int=0 )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;index - 0 or 1.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the x, or horizontal, state of a joystick.&lt;/p&gt;
&lt;p&gt;The return value will be in the range -1 to +1, with -1 representing &#39;left&#39; and +1 representing &#39;right&#39;.&lt;/p&gt;
&lt;p&gt;In the case of controllers with 2 joysticks, the index parameter should be 0 for the left hand joystick, or 1 for the right hand joystick.&lt;/p&gt;
&lt;p&gt;Note: On the XNA target, JoyX, JoyY and JoyZ will all return 0 until a joystick button is pressed. This is to comply with xbox live publishing guidelines that state that it must be possible to use any of the 4 controllers to play a game. Mojo will therefore wait until a button is pressed (usually in response to a &#39;press button to start&#39; style message on the title page) before deciding which controller is in use.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>keywords</title>
<link>http://blitz-wiki.appspot.com/keywords</link>
<guid>http://blitz-wiki.appspot.com/keywords</guid>
<pubDate>Thu, 2 Feb 2012 00:17:25 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Language keywords&lt;/h1&gt;
&lt;p&gt;The identifiers below are language keywords and are reserved for use by the Monkey language; these keywords are case-insensitive.&lt;/p&gt;
&lt;h2&gt;Module control&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Strict&quot; title=&quot;Strict&quot;&gt;Strict&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Import&quot; title=&quot;Import&quot;&gt;Import&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Extern&quot; title=&quot;Extern&quot;&gt;Extern&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Declarations&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Const&quot; title=&quot;Const&quot;&gt;Const&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Local&quot; title=&quot;Local&quot;&gt;Local&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Global&quot; title=&quot;Global&quot;&gt;Global&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Field&quot; title=&quot;Field&quot;&gt;Field&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Basic types&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Int&quot; title=&quot;Int&quot;&gt;Int&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Float&quot; title=&quot;Float&quot;&gt;Float&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/String&quot; title=&quot;String&quot;&gt;String&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Bool&quot; title=&quot;Bool&quot;&gt;Bool&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Object&quot; title=&quot;Object&quot;&gt;Object&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Void&quot; title=&quot;Void&quot;&gt;Void&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Classes and functions&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Class&quot; title=&quot;Class&quot;&gt;Class&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Function&quot; title=&quot;Function&quot;&gt;Function&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Method&quot; title=&quot;Method&quot;&gt;Method&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Public&quot; title=&quot;Public&quot;&gt;Public&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Private&quot; title=&quot;Private&quot;&gt;Private&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Property&quot; title=&quot;Property&quot;&gt;Property&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/New&quot; title=&quot;New&quot;&gt;New&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Self&quot; title=&quot;Self&quot;&gt;Self&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Super&quot; title=&quot;Super&quot;&gt;Super&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Extends&quot; title=&quot;Extends&quot;&gt;Extends&lt;/a&gt; | Abstract | Final | Interface | Null&lt;/p&gt;
&lt;h2&gt;Program flow&lt;/h2&gt;
&lt;p&gt;If | Then | Else | ElseIf | EndIf | While | Wend | &lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Forever&quot; title=&quot;Forever&quot;&gt;Forever&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/To&quot; title=&quot;To&quot;&gt;To&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Step&quot; title=&quot;Step&quot;&gt;Step&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Eachin&quot; title=&quot;Eachin&quot;&gt;Eachin&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt; | Select | Case | Default | End | Continue | Return | &lt;a class=&quot;int&quot; href=&quot;/Exit&quot; title=&quot;Exit&quot;&gt;Exit&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Logic/misc&lt;/h2&gt;
&lt;p&gt;And | Or | Shl | Shr | Not | Mod | &lt;a class=&quot;int&quot; href=&quot;/True&quot; title=&quot;True&quot;&gt;True&lt;/a&gt; | &lt;a class=&quot;int&quot; href=&quot;/False&quot; title=&quot;False&quot;&gt;False&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reserved&lt;/h2&gt;
&lt;p&gt;Module | Interface | Implements | Inline | Array&lt;/p&gt;
&lt;p&gt;&lt;em&gt;These keywords are not currently used by the Monkey language but are reserved for future use.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Language_reference&quot; title=&quot;Language_reference&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Exit</title>
<link>http://blitz-wiki.appspot.com/Exit</link>
<guid>http://blitz-wiki.appspot.com/Exit</guid>
<pubDate>Wed, 1 Feb 2012 23:09:09 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Exit&lt;/h1&gt;
&lt;p&gt;Allows program flow to &#39;jump out&#39; of loops, continuing execution after the relevant closing keyword.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Exit&lt;br /&gt;
&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Exit keyword allows program flow to &#39;jump out&#39; of While/Wend and Repeat/Until or Repeat/Forever loops, continuing execution after the relevant closing keyword.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=While&amp;{FORMAT}&quot; title=&quot;While (create)&quot;&gt;While&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
x = 1

Repeat
&amp;nbsp;&amp;nbsp;x = x + 1
&amp;nbsp;&amp;nbsp;If x = 3 Then Exit
Forever

&#39; Program flow will continue here after Exit

Print &quot;Exited loop!&quot;
&lt;/pre&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;pre&gt;
x = 1

&#39; Inner loop example

Repeat

&amp;nbsp;&amp;nbsp;Repeat
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x = x + 1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If x = 3 Then Exit
&amp;nbsp;&amp;nbsp;Forever

&amp;nbsp;&amp;nbsp;&#39; Program flow will continue here after Exit

&amp;nbsp;&amp;nbsp;Print &quot;Exited inner loop!&quot;

Forever
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Forever</title>
<link>http://blitz-wiki.appspot.com/Forever</link>
<guid>http://blitz-wiki.appspot.com/Forever</guid>
<pubDate>Wed, 1 Feb 2012 22:28:24 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Forever&lt;/h1&gt;
&lt;p&gt;Marks the end of a Repeat/Forever loop. See &lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Repeat&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Forever&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Forever marks the end of a Repeat/Forever loop; the statements within are repeatedly executed indefinitely.&lt;/p&gt;
&lt;p&gt;The Exit keyword can be used to &#39;jump out&#39; of the loop, continuing execution after the closing Forever.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An alternative to Repeat/Forever is Repeat/Until, which repeats the statements within until the expression is true.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Exit&quot; title=&quot;Exit&quot;&gt;Exit&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Repeat</title>
<link>http://blitz-wiki.appspot.com/Repeat</link>
<guid>http://blitz-wiki.appspot.com/Repeat</guid>
<pubDate>Wed, 1 Feb 2012 22:27:39 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Repeat&lt;/h1&gt;
&lt;p&gt;Marks the start of a Repeat/Until or Repeat/Forever loop.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Repeat&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Until &lt;em&gt;expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Repeat&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Forever&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;A Repeat/Until loop repeatedly executes the statements within until the expression is true.&lt;/p&gt;
&lt;p&gt;A Repeat/Forever loop repeatedly executes the statements within indefinitely.&lt;/p&gt;
&lt;p&gt;The Exit keyword can be used to &#39;jump out&#39; of the loop, continuing execution after the closing Until or Forever.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Forever&quot; title=&quot;Forever&quot;&gt;Forever&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Exit&quot; title=&quot;Exit&quot;&gt;Exit&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Step</title>
<link>http://blitz-wiki.appspot.com/Step</link>
<guid>http://blitz-wiki.appspot.com/Step</guid>
<pubDate>Wed, 1 Feb 2012 23:10:51 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Step&lt;/h1&gt;
&lt;p&gt;Optional For/Next loop modifier specifying size of iteration step. See &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; To &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The optional Step keyword, followed by a constant value, allows control over the size of the iteration step in a For/Next loop.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/To&quot; title=&quot;To&quot;&gt;To&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
For k=1 To 1000 Step 100
&amp;nbsp;&amp;nbsp;Print k
Next
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Until</title>
<link>http://blitz-wiki.appspot.com/Until</link>
<guid>http://blitz-wiki.appspot.com/Until</guid>
<pubDate>Wed, 1 Feb 2012 23:12:07 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Until&lt;/h1&gt;
&lt;p&gt;Marks the end of a Repeat/Until loop. See &lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that the Until keyword is also found as a modifier in For/Next loops; see &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for further details.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Repeat&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Until &lt;em&gt;expression&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Until marks the end of a Repeat/Until loop; the statements within are repeatedly executed until the expression is true.&lt;/p&gt;
&lt;p&gt;The Exit keyword can be used to &#39;jump out&#39; of the loop, continuing execution after the closing Until.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An alternative to Repeat/Until is Repeat/Forever, which repeatedly executes the statements within indefinitely.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Repeat&quot; title=&quot;Repeat&quot;&gt;Repeat&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Forever&quot; title=&quot;Forever&quot;&gt;Forever&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Exit&quot; title=&quot;Exit&quot;&gt;Exit&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>To</title>
<link>http://blitz-wiki.appspot.com/To</link>
<guid>http://blitz-wiki.appspot.com/To</guid>
<pubDate>Wed, 1 Feb 2012 23:11:11 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword To&lt;/h1&gt;
&lt;p&gt;Defines range of values to be assigned to the index variable in a For/Next loop. See &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; To &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The To keyword defines the range of values through which a For/Next loop will iterate.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An alternative keyword in a For/Next loop (rather than To), with a slightly different action, is Until; see &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for further details on this.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Eachin</title>
<link>http://blitz-wiki.appspot.com/Eachin</link>
<guid>http://blitz-wiki.appspot.com/Eachin</guid>
<pubDate>Wed, 1 Feb 2012 23:09:52 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Eachin&lt;/h1&gt;
&lt;p&gt;Defines the set of objects or values to be assigned to the index variable in a For/Next loop. See &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := Eachin &lt;em&gt;value_set&lt;/em&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Eachin provides for a variation of the standard For/Next loop which will iterate through a set of objects or values, such as a list or array.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Next</title>
<link>http://blitz-wiki.appspot.com/Next</link>
<guid>http://blitz-wiki.appspot.com/Next</guid>
<pubDate>Wed, 1 Feb 2012 22:43:50 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword Next&lt;/h1&gt;
&lt;p&gt;Declares the end of a For/Next loop. See &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; To &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; Until &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := Eachin &lt;em&gt;value_set&lt;/em&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Next declares the end of a For/Next loop.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An alternative to Next is End For, or simply End.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/To&quot; title=&quot;To&quot;&gt;To&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Eachin&quot; title=&quot;Eachin&quot;&gt;Eachin&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>For</title>
<link>http://blitz-wiki.appspot.com/For</link>
<guid>http://blitz-wiki.appspot.com/For</guid>
<pubDate>Wed, 1 Feb 2012 23:11:40 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Keyword For&lt;/h1&gt;
&lt;p&gt;Declares the start of a For/Next loop.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; To &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := &lt;em&gt;start_value&lt;/em&gt; Until &lt;em&gt;end_value&lt;/em&gt; [ Step &lt;em&gt;constant_value&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;p&gt;For Local &lt;em&gt;IndexVar&lt;/em&gt; := Eachin &lt;em&gt;value_set&lt;/em&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
Next&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;For declares the start of a For/Next loop, allowing for iteration through a set of values or objects.&lt;/p&gt;
&lt;p&gt;There are three variants of the For/Next loop, modifying the values of the index variable via the range keywords below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;To&lt;/code&gt;: Iterates through the given start and end values;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Until&lt;/code&gt;: This variant of For/Next stops iterating before the last value in the loop, useful for iterating through zero-based arrays. (See Example 3.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eachin&lt;/code&gt;: Iterates through a set of objects or values, such as a list or array;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the To and Until variants, the optional Step keyword, followed by a constant value, allows control over the size of the iteration step.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An alternative to the closing Next is End For, or simply End.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/To&quot; title=&quot;To&quot;&gt;To&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Eachin&quot; title=&quot;Eachin&quot;&gt;Eachin&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Until&quot; title=&quot;Until&quot;&gt;Until&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
For k=1 To 1000
&amp;nbsp;&amp;nbsp;Print k
Next

&#39; With optional Step

For k=1 To 1000 Step 100
&amp;nbsp;&amp;nbsp;Print k
Next

&#39; Alternative syntax examples

For k=1 To 1000
&amp;nbsp;&amp;nbsp;Print k
End

For k=1 To 1000
&amp;nbsp;&amp;nbsp;Print k
End For
&lt;/pre&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;pre&gt;
&#39; Assume m:MyObject and mylist:List

For m=Eachin mylist
&amp;nbsp;&amp;nbsp;Print m.myField
Next

&#39; Assume i:Int and myarray:Int[]

For i=Eachin myarray
&amp;nbsp;&amp;nbsp;Print myarray[i]
Next
&lt;/pre&gt;

&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;pre&gt;
NUM = 100 &#39; Assume myarray[NUM] has been declared

&#39; Prints 0 to 99 without requiring NUM-1

For k=0 Until NUM
&amp;nbsp;&amp;nbsp;Print myarray[k]
Next
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Scratch</title>
<link>http://blitz-wiki.appspot.com/Scratch</link>
<guid>http://blitz-wiki.appspot.com/Scratch</guid>
<pubDate>Mon, 30 Jan 2012 20:03:12 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Scratch&lt;/h1&gt;
&lt;p&gt;Scratch links here!&lt;/p&gt;
&lt;p&gt;eg: &lt;a class=&quot;int&quot; href=&quot;/For&quot; title=&quot;For&quot;&gt;For&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Next&quot; title=&quot;Next&quot;&gt;Next&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Class&quot; title=&quot;Class&quot;&gt;Class&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Import&quot; title=&quot;Import&quot;&gt;Import&lt;/a&gt; &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=Keywords&amp;{FORMAT}&quot; title=&quot;Keywords (create)&quot;&gt;Keywords&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Docs reference style guide - don&#39;t delete me!&lt;/h1&gt;
&lt;p&gt;In general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be consistent. Keep it simple, don&#39;t waffle etc. Docs should read like they were written by the same person.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it clean. Use same style/font for entire doc, except for headers and code samples. Use one # for main header, ## for sub headers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general, keep links for a &#39;See Also&#39; section. Links all over the place would be nice, but it&#39;s very hard to do this consistently  - see 1 above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use strict mode for syntax descriptions. Function params should be comma separated, with a space after each comma and a space after/before the first/last bracket. Param names should be &#39;camel case&#39;, eg: &quot;sizeInBytes&quot;. It&#39;s OK to convert &#39;non-strict&#39; decls to strict, except when describing a method that can be overidden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remember to escape &amp;lt; and &amp;gt; with backslashes when doccing generic args, or they will be mistaken for html.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &amp;#91;&amp;#91;link|text&amp;#93;&amp;#93; for wiki links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;...except when text contains []() - GAE wiki bug means this produces very strange results when you try and edit page (bug has been reported). In this case, use &amp;#91;text&amp;H93;(link) for now - or use &quot;&amp;amp; # 9 1 ;&quot; (without quotes/spaces!) and &quot;&amp;amp; # 9 3 ;&quot; for square brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Page names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For top level modules, use &#39;The blah module&#39;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For sub-modules, redirect to top level module for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For global decls (ie: Consts, Globals, Functions and Classes at &#39;module scope&#39;), use decl name for page name, eg: DrawImage. If there&#39;s a clash, qualify one of the page names with module, eg: &quot;os.LoadString&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For class members, qualify with class page name, eg: Image.Width.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class docs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;List members in alphabetical order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List members in subsections categorized in order...?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>QuickHelp</title>
<link>http://blitz-wiki.appspot.com/QuickHelp</link>
<guid>http://blitz-wiki.appspot.com/QuickHelp</guid>
<pubDate>Thu, 26 Jan 2012 02:49:23 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h1&gt;Master index for &lt;a class=&quot;int&quot; href=&quot;/Monk&quot; title=&quot;Monk&quot;&gt;Monk&lt;/a&gt; quick help index.&lt;/h1&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Monk&quot; title=&quot;Monk&quot;&gt;Monk&lt;/a&gt; reads this page to refresh it&#39;s Wiki index.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mojo
    Image

    LoadImage:Image(filename$)
    SaveImage(filename$,image:Image)
&lt;/code&gt;&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Drawing with Images</title>
<link>http://blitz-wiki.appspot.com/Drawing_with_Images</link>
<guid>http://blitz-wiki.appspot.com/Drawing_with_Images</guid>
<pubDate>Thu, 2 Feb 2012 18:37:32 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h1&gt;Drawing with Images&lt;/h1&gt;
&lt;p&gt;In this tutorial we load some images from our apps data folder and learn more about &lt;a class=&quot;int&quot; href=&quot;/mojo.graphics&quot; title=&quot;mojo.graphics&quot;&gt;mojo.graphics&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import mojo

Class Game Extends App

    Field image:Image

    Method OnCreate()
        SetUpdateRate 30
        image=LoadImage(&quot;monkey64.png&quot;)
    End

    Method OnRender()
        Cls
        DrawImage image,20,20       
    End

End

Function Main()
    New Game()
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a new monkey file, paste the above code, and save as &quot;game.monkey&quot; in a new folder on your computer.&lt;/p&gt;
&lt;p&gt;This app, when run, produces a black display as the &lt;a class=&quot;int&quot; href=&quot;/LoadImage&quot; title=&quot;LoadImage&quot;&gt;LoadImage&lt;/a&gt; command will fail to find the file monkey64.png.&lt;/p&gt;
&lt;p&gt;In the same folder that you saved &quot;game.monkey&quot; create a new directory named &quot;game.data&quot;. Copy this &lt;a href=&quot;http://commondatastorage.googleapis.com/monkeycoder.co.nz/blitz-wiki/monkeylogos/monkey64.png&quot;&gt;image&lt;/a&gt; to the newly created .data folder.&lt;/p&gt;
&lt;h2&gt;Add Points where you Click&lt;/h2&gt;
&lt;p&gt;Now we add a new Point class that contains an x y coordinate pair using floating point values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Class Point
    Field x#
    Field y#
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also add a List container to manage the Points that we store each time the user clicks on the screen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Field points:=New List&amp;lt;Point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The := syntax is a shortcut for a standard equate that infers the type of the Left Hand Side (LHS) from the type on the Right Hand Side (RHS). In this case the Field named points of type List&amp;LT;Point&amp;GT; could have also been declared and initialized using the longer winded:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Field points.List&amp;lt;Point&amp;gt;=New List&amp;lt;Point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type List&amp;LT;Point&amp;GT; is an example of a monkey template. A List&amp;LT;Point&amp;GT; supports the standard List interface but specifically for objects of type Point.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import mojo

Class Point
    Field x#
    Field y#
End

Class Game Extends App

    Field image:Image
    Field points:=New List&amp;lt;Point&amp;gt;

    Method OnCreate()
        SetUpdateRate 30
        image=LoadImage(&quot;monkey64.png&quot;)
    End

    Method AddPoint(x#,y#)
        Local p:Point=New Point
        p.x=x
        p.y=y
        points.AddLast p
    End

    Method OnUpdate()
        If MouseHit() AddPoint MouseX,MouseY
    End

    Method OnRender()
        Cls
        For Local point:=Eachin points
            DrawImage image,point.x,point.y
        Next
    End

End

Function Main()
    New Game()
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a class=&quot;int&quot; href=&quot;/List.AddLast&quot; title=&quot;List.AddLast&quot;&gt;AddLast&lt;/a&gt; method is called on the list to add an entry each time the user clicks the mouse.&lt;/p&gt;
&lt;p&gt;The OnRender method draws the list of monkeys by using the enumeration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        For Local point:=Eachin points
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows monkey code to process each element of the list in the order they were added.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>opengl.databuffer</title>
<link>http://blitz-wiki.appspot.com/opengl.databuffer</link>
<guid>http://blitz-wiki.appspot.com/opengl.databuffer</guid>
<pubDate>Wed, 25 Jan 2012 05:31:43 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;opengl.databuffer&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;opengl.databuffer&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The HTML5 target</title>
<link>http://blitz-wiki.appspot.com/The_HTML5_target</link>
<guid>http://blitz-wiki.appspot.com/The_HTML5_target</guid>
<pubDate>Sat, 28 Jan 2012 21:57:37 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The HTML5 target&lt;/h1&gt;
&lt;p&gt;HTML5 is an emerging standard for writing web based apps.&lt;/p&gt;
&lt;h2&gt;You will need:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;An HTML5 capable browser such as Chrome, Firefox, Opera, Safari or IE9.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;HTML5 apps use a canvas element for graphics rendering. To change the size and layout of this canvas, you will need to modify the MonkeyGame.html and/or main.js files in the appâ€™s .build/html5 directory.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Targets</title>
<link>http://blitz-wiki.appspot.com/Targets</link>
<guid>http://blitz-wiki.appspot.com/Targets</guid>
<pubDate>Wed, 25 Jan 2012 01:12:29 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Targets&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Targets&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Language</title>
<link>http://blitz-wiki.appspot.com/Language</link>
<guid>http://blitz-wiki.appspot.com/Language</guid>
<pubDate>Wed, 25 Jan 2012 01:11:51 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Language&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Modules</title>
<link>http://blitz-wiki.appspot.com/Modules</link>
<guid>http://blitz-wiki.appspot.com/Modules</guid>
<pubDate>Wed, 25 Jan 2012 01:10:18 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Modules&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Monkey</title>
<link>http://blitz-wiki.appspot.com/Monkey</link>
<guid>http://blitz-wiki.appspot.com/Monkey</guid>
<pubDate>Wed, 25 Jan 2012 00:11:24 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Monkey&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Monkey&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>monkey.math</title>
<link>http://blitz-wiki.appspot.com/monkey.math</link>
<guid>http://blitz-wiki.appspot.com/monkey.math</guid>
<pubDate>Tue, 24 Jan 2012 03:57:50 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;monkey.math&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;monkey.math&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Object</title>
<link>http://blitz-wiki.appspot.com/Object</link>
<guid>http://blitz-wiki.appspot.com/Object</guid>
<pubDate>Wed, 1 Feb 2012 22:09:00 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Class Object&lt;/h1&gt;
&lt;p&gt;The built-in object class.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Object class is the common base class for all monkey objects.&lt;/p&gt;
&lt;p&gt;The object class currently has no members.&lt;/p&gt;
&lt;p&gt;Please see the Object Type and Classes sections of the monkey language reference for more information about class and objects.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#classes&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>String</title>
<link>http://blitz-wiki.appspot.com/String</link>
<guid>http://blitz-wiki.appspot.com/String</guid>
<pubDate>Wed, 1 Feb 2012 22:08:35 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Type String&lt;/h1&gt;
&lt;p&gt;The built-in string type.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The String type is a fundamental monkey type used to represent sequences of characters.&lt;/p&gt;
&lt;p&gt;Please see the Types section of the monkey language reference for more information on the string type.&lt;/p&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Length&amp;{FORMAT}&quot; title=&quot;String.Length (create)&quot;&gt;Length:Int&lt;/a&gt; (read only)&lt;br /&gt;
Get length of string.&lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Compare&amp;{FORMAT}&quot; title=&quot;String.Compare (create)&quot;&gt;Compare:Int( str:String )&lt;/a&gt;&lt;br /&gt;
Compare with another string.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Contains&amp;{FORMAT}&quot; title=&quot;String.Contains (create)&quot;&gt;Contains:Bool( str:String )&lt;/a&gt;&lt;br /&gt;
Check if string contains another string.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.EndsWith&amp;{FORMAT}&quot; title=&quot;String.EndsWith (create)&quot;&gt;EndsWith:Bool( str:String )&lt;/a&gt;&lt;br /&gt;
Check if string ends with another string.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Find&amp;{FORMAT}&quot; title=&quot;String.Find (create)&quot;&gt;Find:Int( str:String )&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Find&amp;{FORMAT}&quot; title=&quot;String.Find (create)&quot;&gt;Find:Int( str:String, startIndex:Int )&lt;/a&gt;&lt;br /&gt;
Search for a substring.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String_FindLast&amp;{FORMAT}&quot; title=&quot;String FindLast (create)&quot;&gt;FindLast:Int( str:String )&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String_FindLast&amp;{FORMAT}&quot; title=&quot;String FindLast (create)&quot;&gt;FindLast:Int( str:String, startIndex:Int )&lt;/a&gt;&lt;br /&gt;
Search backwards for a substring.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;String.Join&quot;&gt;Join:String( pieces:String[] )&lt;/a&gt;&lt;br /&gt;
Join string arrays together.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Replace&amp;{FORMAT}&quot; title=&quot;String.Replace (create)&quot;&gt;Replace:String( findStr:String, repStr:String )&lt;/a&gt;&lt;br /&gt;
Replace occurances of a substring.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;String.Split&quot;&gt;Split:String[]( separator:String )&lt;/a&gt;&lt;br /&gt;
Split a string into pieces.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.StartsWith&amp;{FORMAT}&quot; title=&quot;String.StartsWith (create)&quot;&gt;StartsWith:Bool( str:String )&lt;/a&gt;&lt;br /&gt;
Check if string starts with another string.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.ToLower&amp;{FORMAT}&quot; title=&quot;String.ToLower (create)&quot;&gt;ToLower:String()&lt;/a&gt;&lt;br /&gt;
Convert string to lowercase.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.ToUpper&amp;{FORMAT}&quot; title=&quot;String.ToUpper (create)&quot;&gt;ToUpper:String()&lt;/a&gt;&lt;br /&gt;
Convert string to uppercase.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.Trim&amp;{FORMAT}&quot; title=&quot;String.Trim (create)&quot;&gt;Trim:String()&lt;/a&gt;&lt;br /&gt;
Strip whitespace from start and end of string.&lt;/p&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=String.FromChar&amp;{FORMAT}&quot; title=&quot;String.FromChar (create)&quot;&gt;FromChar:String( char:Int )&lt;/a&gt;&lt;br /&gt;
Create string from character code.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#types&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Int</title>
<link>http://blitz-wiki.appspot.com/Int</link>
<guid>http://blitz-wiki.appspot.com/Int</guid>
<pubDate>Wed, 1 Feb 2012 22:08:11 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Type Int&lt;/h1&gt;
&lt;p&gt;The built-in int type.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Int type is a fundamental monkey type used to represent signed integer values.&lt;/p&gt;
&lt;p&gt;Please see the Types section of the monkey language reference for more information on the int type.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#types&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Float</title>
<link>http://blitz-wiki.appspot.com/Float</link>
<guid>http://blitz-wiki.appspot.com/Float</guid>
<pubDate>Wed, 1 Feb 2012 22:08:26 +0000</pubDate>
<author>druggedbunny@gmail.com</author>
<description>&lt;h1&gt;Type Float&lt;/h1&gt;
&lt;p&gt;The built-in float type.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Float type is a fundamental monkey type used to represent floating point values.&lt;/p&gt;
&lt;p&gt;Please see the Types section of the monkey language reference for more information on the float type.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;Language_reference#types&quot;&gt;Language reference&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>monkey.lang</title>
<link>http://blitz-wiki.appspot.com/monkey.lang</link>
<guid>http://blitz-wiki.appspot.com/monkey.lang</guid>
<pubDate>Tue, 24 Jan 2012 03:42:16 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;monkey.lang&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;monkey.lang&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Array.Resize</title>
<link>http://blitz-wiki.appspot.com/Array.Resize</link>
<guid>http://blitz-wiki.appspot.com/Array.Resize</guid>
<pubDate>Tue, 24 Jan 2012 03:42:00 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method Resize&lt;/h1&gt;
&lt;p&gt;Resize an array.&lt;/p&gt;
&lt;p&gt;Type: &lt;a class=&quot;int&quot; href=&quot;/Array&quot; title=&quot;Array&quot;&gt;Array&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method Resize:Array( newLength:Int )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;newLength - new array length.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns a copy of this array, resized to newLength.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Array.Length</title>
<link>http://blitz-wiki.appspot.com/Array.Length</link>
<guid>http://blitz-wiki.appspot.com/Array.Length</guid>
<pubDate>Tue, 24 Jan 2012 03:40:29 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Property Length&lt;/h1&gt;
&lt;p&gt;Get length of array.&lt;/p&gt;
&lt;p&gt;Type: &lt;a class=&quot;int&quot; href=&quot;/Array&quot; title=&quot;Array&quot;&gt;Array&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method Length:Int() Property&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the number of elements contained in the array. &lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Array</title>
<link>http://blitz-wiki.appspot.com/Array</link>
<guid>http://blitz-wiki.appspot.com/Array</guid>
<pubDate>Tue, 24 Jan 2012 03:39:42 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Type Array&lt;/h1&gt;
&lt;p&gt;The built-in array type.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.lang&quot; title=&quot;monkey.lang&quot;&gt;monkey.lang&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The Array type is a fundamental monkey type used to represent array values.&lt;/p&gt;
&lt;p&gt;Please see the Types section of the monkey language reference for more information on the array type.&lt;/p&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Array.Length&quot; title=&quot;Array.Length&quot;&gt;Length:Int&lt;/a&gt;&lt;br /&gt;
Get length of array.&lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Array.Resize&quot; title=&quot;Array.Resize&quot;&gt;Resize:Array( newSize:Int )&lt;/a&gt;&lt;br /&gt;
Resize array.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>mojo.graphics</title>
<link>http://blitz-wiki.appspot.com/mojo.graphics</link>
<guid>http://blitz-wiki.appspot.com/mojo.graphics</guid>
<pubDate>Tue, 24 Jan 2012 03:17:51 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;mojo.graphics&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;mojo.graphics&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The os module</title>
<link>http://blitz-wiki.appspot.com/The_os_module</link>
<guid>http://blitz-wiki.appspot.com/The_os_module</guid>
<pubDate>Tue, 24 Jan 2012 03:16:22 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The os module&lt;/h1&gt;
&lt;p&gt;The os module provides miscellaneous operating system functionality, such as file, directory and environment variable access.&lt;/p&gt;
&lt;p&gt;The os module also includes several string processing functions for extracting various components from file system paths such as directory and file extension.&lt;/p&gt;
&lt;p&gt;IMPORTANT! The os module is currently only available for the glfw and stdcpp targets.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The opengl module</title>
<link>http://blitz-wiki.appspot.com/The_opengl_module</link>
<guid>http://blitz-wiki.appspot.com/The_opengl_module</guid>
<pubDate>Fri, 27 Jan 2012 00:46:00 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The opengl module&lt;/h1&gt;
&lt;p&gt;The opengl module provides access to various OpenGL APIs on targets with OpenGL support.&lt;/p&gt;
&lt;p&gt;Currently, there are 2 APIs supported: OpenGL ES 1.1 and OpenGL ES 2.0.&lt;/p&gt;
&lt;p&gt;You can only use one API at a time, and must manually import the correct version - importing opengl alone will not import any APIs.&lt;/p&gt;
&lt;p&gt;In addition, opengl support currently depends on the mojo module to create and manage GL contexts, so you will also need to import at least mojo.graphics. &lt;/p&gt;
&lt;p&gt;For example, to import the OpenGL ES 1.1 API, use:&lt;/p&gt;
&lt;pre&gt;
Import mojo
Import opengl.gles11
&lt;/pre&gt;

&lt;p&gt;To import the OpenGL ES 2.0 API, use:&lt;/p&gt;
&lt;pre&gt;
Import mojo
Import opengl.gles20
&lt;/pre&gt;

&lt;p&gt;The opengl module also provides a DataBuffer class for passing raw data to and from OpenGL, and the LoadImageData helper function for loading raw image data.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/GLES11&quot; title=&quot;GLES11&quot;&gt;GLES11&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GLES20&quot; title=&quot;GLES20&quot;&gt;GLES20&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadImageData&quot; title=&quot;LoadImageData&quot;&gt;LoadImageData&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Tutorials</title>
<link>http://blitz-wiki.appspot.com/Tutorials</link>
<guid>http://blitz-wiki.appspot.com/Tutorials</guid>
<pubDate>Thu, 2 Feb 2012 21:50:04 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;The &lt;a class=&quot;int&quot; href=&quot;/Monkey_Demo_Guide&quot; title=&quot;Monkey Demo Guide&quot;&gt;Monkey Demo Guide&lt;/a&gt; is a step by step guide to installing monkey and running your first app.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/First_Monkey_Steps&quot; title=&quot;First Monkey Steps&quot;&gt;First Monkey Steps&lt;/a&gt; introduces three simple programs that will have you learning the ropes in no time.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Drawing_with_Images&quot; title=&quot;Drawing with Images&quot;&gt;Drawing with Images&lt;/a&gt; describes the steps to importing graphics into monkey projects.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;int&quot; href=&quot;/Monkey_Publishing_Guide&quot; title=&quot;Monkey Publishing Guide&quot;&gt;Monkey Publishing Guide&lt;/a&gt; introduces the variety of platforms monkey can target.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://commondatastorage.googleapis.com/monkeycoder.co.nz/blitz-wiki/learnmonkey.pdf&quot;&gt;Learn Monkey&lt;/a&gt; with this friendly beginners guide by James Boyd (pdf).&lt;/p&gt;
&lt;p&gt;View the &lt;a href=&quot;http://commondatastorage.googleapis.com/monkeycoder.co.nz/blitz-wiki/monkeypixels/monkeypixels_tutorial.pdf&quot;&gt;Monkey Pixels&lt;/a&gt; tutorial by Robbert Prins (pdf).&lt;/p&gt;
&lt;p&gt;Follow the &lt;a href=&quot;http://commondatastorage.googleapis.com/monkeycoder.co.nz/blitz-wiki/pathofthemonkey/index.html&quot;&gt;Path of the Monkey&lt;/a&gt; by Patrick Strandell.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Seed</title>
<link>http://blitz-wiki.appspot.com/Seed</link>
<guid>http://blitz-wiki.appspot.com/Seed</guid>
<pubDate>Tue, 24 Jan 2012 03:09:51 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Global Seed&lt;/h1&gt;
&lt;p&gt;Random number seed.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.random&quot; title=&quot;monkey.random&quot;&gt;monkey.random&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Global Seed&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The current random number generator seed used by Rnd.&lt;/p&gt;
&lt;h2&gt;See also:&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Rnd&quot; title=&quot;Rnd&quot;&gt;Rnd&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>monkey.random</title>
<link>http://blitz-wiki.appspot.com/monkey.random</link>
<guid>http://blitz-wiki.appspot.com/monkey.random</guid>
<pubDate>Tue, 24 Jan 2012 03:04:35 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;monkey.random&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;monkey.random&lt;/strong&gt; is ...&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Rnd</title>
<link>http://blitz-wiki.appspot.com/Rnd</link>
<guid>http://blitz-wiki.appspot.com/Rnd</guid>
<pubDate>Tue, 24 Jan 2012 03:10:16 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function Rnd&lt;/h1&gt;
&lt;p&gt;Generate random number&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.random&quot; title=&quot;monkey.random&quot;&gt;monkey.random&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function Rnd#()&lt;/p&gt;
&lt;p&gt;Function Rnd#( range# )&lt;/p&gt;
&lt;p&gt;Function Rnd#( low#, high# )&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The first version returns a random float in the range 0 (inclusive) to 1 (exclusive).&lt;/p&gt;
&lt;p&gt;The second version returns a random float in the range 0 (inclusive) to range (exclusive).&lt;/p&gt;
&lt;p&gt;The third version returns a random float in the range low (inclusive) to high (exclusive).&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Seed&quot; title=&quot;Seed&quot;&gt;Seed&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The monkey module</title>
<link>http://blitz-wiki.appspot.com/The_monkey_module</link>
<guid>http://blitz-wiki.appspot.com/The_monkey_module</guid>
<pubDate>Tue, 24 Jan 2012 02:58:00 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The monkey module&lt;/h1&gt;
&lt;p&gt;The monkey modules provide &#39;built-in&#39; functionality that is available to every monkey program.&lt;/p&gt;
&lt;p&gt;This includes modules that provide math and random number functions, &#39;boxing&#39; modules for treating primitives such as ints, floats and strings as objects, and modules that provide support for a range of simple container classes such as sets, maps, lists and stacks.&lt;/p&gt;
&lt;p&gt;It is not necesary to import monkey modules as this is done automatically for every monkey program.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The mojo module</title>
<link>http://blitz-wiki.appspot.com/The_mojo_module</link>
<guid>http://blitz-wiki.appspot.com/The_mojo_module</guid>
<pubDate>Fri, 27 Jan 2012 22:25:51 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The mojo module&lt;/h1&gt;
&lt;p&gt;Tho mojo module provides a lightweight programming framework designed primarily for creating simple 2d games.&lt;/p&gt;
&lt;p&gt;Mojo actually consists of 4 sub-modules: mojo.app, mojo.graphics, mojo.audio and mojo.input. You can use import mojo to import all 4 sub-modules.&lt;/p&gt;
&lt;p&gt;Mojo applications must extend the mojo App class declared in mojo.app and create a new instance of this class somewhere inside the Monkey Main() function. This is what actually creates the application.&lt;/p&gt;
&lt;p&gt;All data for mojo programs (images, sounds and text files) must go into a special data directory. This directory has the same name as the program&#39;s main source file, only with a &#39;.data&#39; extension instead of &#39;.monkey&#39;. For example, if your main source file is called &#39;joust2k.monkey&#39;, then your data directory will need to be named &#39;joust2k.data&#39;.&lt;/p&gt;
&lt;p&gt;Mojo functions should not be called until your application&#39;s OnCreate method is called. This means you cannot initialize global variables with values returned by mojo functions such as MilliSecs - you must instead initialize such variables in your application&#39;s OnCreate method or later.&lt;/p&gt;
&lt;p&gt;To import all the mojo modules into your program, simply use:&lt;/p&gt;
&lt;pre&gt;
Import mojo
&lt;/pre&gt;

&lt;p&gt;This will automatically import the mojo.app, mojo.graphics, mojo.audio and mojo.input modules for you in one hit.&lt;/p&gt;
&lt;h2&gt;mojo.app&lt;/h2&gt;
&lt;p&gt;The mojo.app sub-module contains the App class along with various support functions for controlling application behaviour.&lt;/p&gt;
&lt;h2&gt;mojo.graphics&lt;/h2&gt;
&lt;p&gt;The mojo.graphics sub-module contains various functions that allow you to draw 2D graphics on all supported monkey target platforms.&lt;/p&gt;
&lt;p&gt;The module supports rendering of file based images, and a small set of simple primitives.&lt;/p&gt;
&lt;p&gt;Transparency effects can be achieved using SetAlpha to set the global alpha level, and fullscreen rotation and scaling effects can be achieved using the various matrix commands such as Translate, Rotate and Scale.&lt;/p&gt;
&lt;p&gt;The graphics module is state based, and commands that &#39;set&#39; various states will remain in effect until a subsequent &#39;set&#39; modifies the state.&lt;/p&gt;
&lt;h2&gt;mojo.input&lt;/h2&gt;
&lt;p&gt;The input module allows programs to check for user input from a wide variety of devices such keyboards, mice, joysticks and touchsceens.&lt;/p&gt;
&lt;p&gt;The input module uses a &#39;polling&#39; input model, meaning that your program must continually check (or &#39;poll&#39;) the state of input devices. Polling should be performed during the OnUpdate phase of your program.&lt;/p&gt;
&lt;h2&gt;mojo.audio&lt;/h2&gt;
&lt;p&gt;The audio module contains functions for playing sounds and music.&lt;/p&gt;
&lt;p&gt;It uses a simple &#39;fixed&#39; 32 channel model which allows you to play sounds through any of 32 preset audio channels. Audio channels are identified by the use of integer ids in the range 0 to 31.&lt;/p&gt;
&lt;p&gt;Commands that alter a channel&#39;s volume, pan and pitch can be used to either dynamically modify a playing sound, or used on a stopped changed to prepare playback properties.&lt;/p&gt;
&lt;p&gt;In addition, a number of simple music commands are provided for streaming long samples from file.&lt;/p&gt;
&lt;p&gt;The music commands use a single internal channel, so it is not currently possible to stream multiple sample files simultaneously.&lt;/p&gt;
&lt;p&gt;Note that not all targets have equivalent audio capabilities. In particular:&lt;/p&gt;
&lt;p&gt;HTML5 : ChannelPan and ChannelRate do nothing.&lt;/p&gt;
&lt;p&gt;Flash : ChannelRate does nothing. ChannelState and MusicState always returns -1, ie: &#39;unknown&#39;.&lt;/p&gt;
&lt;p&gt;Android : ChannelState always returns -1, ie: &#39;unknown&#39;. Sounds to be used with PlaySound must be less than 1MB in length. Longer sounds can be played using the music commands.&lt;/p&gt;
&lt;p&gt;Also, not all audio formats are supported by all targets:&lt;/p&gt;
&lt;p&gt;wav : glfw, android, ios, xna (sounds)&lt;/p&gt;
&lt;p&gt;mp3 : flash, android, ios, xna (music)&lt;/p&gt;
&lt;p&gt;m4a : flash, android (music), ios&lt;/p&gt;
&lt;p&gt;wma : xna (music)&lt;/p&gt;
&lt;p&gt;ogg : android&lt;/p&gt;
&lt;p&gt;Finally, when designing for low performance hardware it&#39;s a good idea to try and minimize the number of channels used.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>mojo.app</title>
<link>http://blitz-wiki.appspot.com/mojo.app</link>
<guid>http://blitz-wiki.appspot.com/mojo.app</guid>
<pubDate>Tue, 24 Jan 2012 02:29:16 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;mojo.app&lt;/h1&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/The_mojo_module&quot; title=&quot;The mojo module&quot;&gt;The mojo module&lt;/a&gt;.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.Create</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.Create</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.Create</guid>
<pubDate>Tue, 24 Jan 2012 02:19:40 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Function Create&lt;/h1&gt;
&lt;p&gt;Create a new databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Function Create:DataBuffer( size )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;size - buffer size, in bytes.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Creates and returns a new data buffer of the specified byte size.&lt;/p&gt;
&lt;p&gt;Values can be written into the databuffer using the various &#39;poke&#39; methods, or read using the &#39;peek&#39; methods.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PokeShort</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PokeShort</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PokeShort</guid>
<pubDate>Tue, 24 Jan 2012 02:12:32 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PokeShort&lt;/h1&gt;
&lt;p&gt;Poke a short into a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PokeShort( addr, value )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to poke&lt;/p&gt;
&lt;p&gt;value - value to poke&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Stores value into the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PokeInt</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PokeInt</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PokeInt</guid>
<pubDate>Tue, 24 Jan 2012 02:11:11 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PokeInt&lt;/h1&gt;
&lt;p&gt;Poke an into into a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PokeInt( addr, value )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to poke&lt;/p&gt;
&lt;p&gt;value - value to poke&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Stores value into the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PokeFloat</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PokeFloat</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PokeFloat</guid>
<pubDate>Tue, 24 Jan 2012 02:10:35 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PokeFloat&lt;/h1&gt;
&lt;p&gt;Poke a float into a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PokeFloat( addr, value )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to poke&lt;/p&gt;
&lt;p&gt;value - value to poke&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Stores value into the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PokeByte</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PokeByte</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PokeByte</guid>
<pubDate>Tue, 24 Jan 2012 02:10:02 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PokeByte&lt;/h1&gt;
&lt;p&gt;Poke a byte into a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PokeByte( addr, value )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to poke&lt;/p&gt;
&lt;p&gt;value - value to poke&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Stores value into the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PeekShort</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PeekShort</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PeekShort</guid>
<pubDate>Tue, 24 Jan 2012 02:09:13 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PeekShort&lt;/h1&gt;
&lt;p&gt;Peek a short from a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PeekShort( addr )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to peek&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the short value contained in the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PeekInt</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PeekInt</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PeekInt</guid>
<pubDate>Tue, 24 Jan 2012 02:08:27 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PeekInt&lt;/h1&gt;
&lt;p&gt;Peek an int from a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PeekInt( addr )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to peek&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the int value contained in the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.PeekFloat</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.PeekFloat</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.PeekFloat</guid>
<pubDate>Tue, 24 Jan 2012 02:07:47 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method PokeFloat&lt;/h1&gt;
&lt;p&gt;Poke a float into a databuffer.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method PokeFloat( addr, value )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;addr - byte address to poke&lt;/p&gt;
&lt;p&gt;value - value to poke&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Stores value into the data buffer at address addr.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>DataBuffer.Size</title>
<link>http://blitz-wiki.appspot.com/DataBuffer.Size</link>
<guid>http://blitz-wiki.appspot.com/DataBuffer.Size</guid>
<pubDate>Tue, 24 Jan 2012 02:06:54 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method Size&lt;/h1&gt;
&lt;p&gt;Get databuffer size.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method Size()&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Returns the size, in bytes, of the data buffer.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Module reference</title>
<link>http://blitz-wiki.appspot.com/Module_reference</link>
<guid>http://blitz-wiki.appspot.com/Module_reference</guid>
<pubDate>Tue, 31 Jan 2012 22:14:07 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h2&gt;The mojo module &lt;a class=&quot;int&quot; href=&quot;/The_mojo_module&quot; title=&quot;The mojo module&quot;&gt;(more...)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Topics: &lt;a class=&quot;int&quot; href=&quot;/Key_codes&quot; title=&quot;Key codes&quot;&gt;Key codes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Classes: &lt;a class=&quot;int&quot; href=&quot;/App&quot; title=&quot;App&quot;&gt;App&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Image&quot; title=&quot;Image&quot;&gt;Image&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Sound&quot; title=&quot;Sound&quot;&gt;Sound&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;App functions: &lt;a class=&quot;int&quot; href=&quot;/LoadState&quot; title=&quot;LoadState&quot;&gt;LoadState&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadString&quot; title=&quot;LoadString&quot;&gt;LoadString&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Millisecs&quot; title=&quot;Millisecs&quot;&gt;Millisecs&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SaveState&quot; title=&quot;SaveState&quot;&gt;SaveState&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetUpdateRate&quot; title=&quot;SetUpdateRate&quot;&gt;SetUpdateRate&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/UpdateRate&quot; title=&quot;UpdateRate&quot;&gt;UpdateRate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Graphics functions: &lt;a class=&quot;int&quot; href=&quot;/Cls&quot; title=&quot;Cls&quot;&gt;Cls&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DeviceHeight&quot; title=&quot;DeviceHeight&quot;&gt;DeviceHeight&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DeviceWidth&quot; title=&quot;DeviceWidth&quot;&gt;DeviceWidth&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawCircle&quot; title=&quot;DrawCircle&quot;&gt;DrawCircle&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawEllipse&quot; title=&quot;DrawEllipse&quot;&gt;DrawEllipse&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawImage&quot; title=&quot;DrawImage&quot;&gt;DrawImage&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawImageRect&quot; title=&quot;DrawImageRect&quot;&gt;DrawImageRect&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawLine&quot; title=&quot;DrawLine&quot;&gt;DrawLine&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawOval&quot; title=&quot;DrawOval&quot;&gt;DrawOval&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawPoint&quot; title=&quot;DrawPoint&quot;&gt;DrawPoint&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawPoly&quot; title=&quot;DrawPoly&quot;&gt;DrawPoly&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawRect&quot; title=&quot;DrawRect&quot;&gt;DrawRect&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DrawText&quot; title=&quot;DrawText&quot;&gt;DrawText&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetAlpha&quot; title=&quot;GetAlpha&quot;&gt;GetAlpha&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetBlend&quot; title=&quot;GetBlend&quot;&gt;GetBlend&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetColor&quot; title=&quot;GetColor&quot;&gt;GetColor&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetFont&quot; title=&quot;GetFont&quot;&gt;GetFont&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetMatrix&quot; title=&quot;GetMatrix&quot;&gt;GetMatrix&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetScissor&quot; title=&quot;GetScissor&quot;&gt;GetScissor&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadImage&quot; title=&quot;LoadImage&quot;&gt;LoadImage&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PopMatrix&quot; title=&quot;PopMatrix&quot;&gt;PopMatrix&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PushMatrix&quot; title=&quot;PushMatrix&quot;&gt;PushMatrix&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Rotate&quot; title=&quot;Rotate&quot;&gt;Rotate&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Scale&quot; title=&quot;Scale&quot;&gt;Scale&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetAlpha&quot; title=&quot;SetAlpha&quot;&gt;SetAlpha&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetBlend&quot; title=&quot;SetBlend&quot;&gt;SetBlend&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetColor&quot; title=&quot;SetColor&quot;&gt;SetColor&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetFont&quot; title=&quot;SetFont&quot;&gt;SetFont&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetMatrix&quot; title=&quot;SetMatrix&quot;&gt;SetMatrix&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetScissor&quot; title=&quot;SetScissor&quot;&gt;SetScissor&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Transform&quot; title=&quot;Transform&quot;&gt;Transform&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Translate&quot; title=&quot;Translate&quot;&gt;Translate&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Audio functions: &lt;a class=&quot;int&quot; href=&quot;/ChannelState&quot; title=&quot;ChannelState&quot;&gt;ChannelState&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadSound&quot; title=&quot;LoadSound&quot;&gt;LoadSound&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/MusicState&quot; title=&quot;MusicState&quot;&gt;MusicState&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PauseChannel&quot; title=&quot;PauseChannel&quot;&gt;PauseChannel&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PauseMusic&quot; title=&quot;PauseMusic&quot;&gt;PauseMusic&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PlayMusic&quot; title=&quot;PlayMusic&quot;&gt;PlayMusic&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PlaySound&quot; title=&quot;PlaySound&quot;&gt;PlaySound&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ResumeChannel&quot; title=&quot;ResumeChannel&quot;&gt;ResumeChannel&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ResumeMusic&quot; title=&quot;ResumeMusic&quot;&gt;ResumeMusic&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetChannelPan&quot; title=&quot;SetChannelPan&quot;&gt;SetChannelPan&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetChannelRate&quot; title=&quot;SetChannelRate&quot;&gt;SetChannelRate&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetChannelVolume&quot; title=&quot;SetChannelVolume&quot;&gt;SetChannelVolume&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetMusicVolume&quot; title=&quot;SetMusicVolume&quot;&gt;SetMusicVolume&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StopChannel&quot; title=&quot;StopChannel&quot;&gt;StopChannel&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StopMusic&quot; title=&quot;StopMusic&quot;&gt;StopMusic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Input functions: &lt;a class=&quot;int&quot; href=&quot;/AccelX&quot; title=&quot;AccelX&quot;&gt;AccelX&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/AccelY&quot; title=&quot;AccelY&quot;&gt;AccelY&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/AccelZ&quot; title=&quot;AccelZ&quot;&gt;AccelZ&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DisableKeyboard&quot; title=&quot;DisableKeyboard&quot;&gt;DisableKeyboard&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/EnableKeyboard&quot; title=&quot;EnableKeyboard&quot;&gt;EnableKeyboard&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetChar&quot; title=&quot;GetChar&quot;&gt;GetChar&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/JoyDown&quot; title=&quot;JoyDown&quot;&gt;JoyDown&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/JoyHit&quot; title=&quot;JoyHit&quot;&gt;JoyHit&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/JoyX&quot; title=&quot;JoyX&quot;&gt;JoyX&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/JoyY&quot; title=&quot;JoyY&quot;&gt;JoyY&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/JoyZ&quot; title=&quot;JoyZ&quot;&gt;JoyZ&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/KeyDown&quot; title=&quot;KeyDown&quot;&gt;KeyDown&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/KeyHit&quot; title=&quot;KeyHit&quot;&gt;KeyHit&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/MouseDown&quot; title=&quot;MouseDown&quot;&gt;MouseDown&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/MouseHit&quot; title=&quot;MouseHit&quot;&gt;MouseHit&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/MouseX&quot; title=&quot;MouseX&quot;&gt;MouseX&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/MouseY&quot; title=&quot;MouseY&quot;&gt;MouseY&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/TouchDown&quot; title=&quot;TouchDown&quot;&gt;TouchDown&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/TouchHit&quot; title=&quot;TouchHit&quot;&gt;TouchHit&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/TouchX&quot; title=&quot;TouchX&quot;&gt;TouchX&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/TouchY&quot; title=&quot;TouchY&quot;&gt;TouchY&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The monkey module &lt;a class=&quot;int&quot; href=&quot;/The_monkey_module&quot; title=&quot;The monkey module&quot;&gt;(more...)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IO reference: &lt;a class=&quot;int&quot; href=&quot;/Print&quot; title=&quot;Print&quot;&gt;Print&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Error&quot; title=&quot;Error&quot;&gt;Error&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Math reference: &lt;a class=&quot;int&quot; href=&quot;/ACos&quot; title=&quot;ACos&quot;&gt;ACos&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ACosr&quot; title=&quot;ACosr&quot;&gt;ACosr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ASin&quot; title=&quot;ASin&quot;&gt;ASin&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ASinr&quot; title=&quot;ASinr&quot;&gt;ASinr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ATan&quot; title=&quot;ATan&quot;&gt;ATan&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ATan2&quot; title=&quot;ATan2&quot;&gt;ATan2&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ATan2r&quot; title=&quot;ATan2r&quot;&gt;ATan2r&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ATanr&quot; title=&quot;ATanr&quot;&gt;ATanr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Abs&quot; title=&quot;Abs&quot;&gt;Abs&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Ceil&quot; title=&quot;Ceil&quot;&gt;Ceil&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Clamp&quot; title=&quot;Clamp&quot;&gt;Clamp&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Cos&quot; title=&quot;Cos&quot;&gt;Cos&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Cosr&quot; title=&quot;Cosr&quot;&gt;Cosr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Exp&quot; title=&quot;Exp&quot;&gt;Exp&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Floor&quot; title=&quot;Floor&quot;&gt;Floor&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/HALFPI&quot; title=&quot;HALFPI&quot;&gt;HALFPI&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Log&quot; title=&quot;Log&quot;&gt;Log&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Max&quot; title=&quot;Max&quot;&gt;Max&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Min&quot; title=&quot;Min&quot;&gt;Min&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/PI&quot; title=&quot;PI&quot;&gt;PI&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Pow&quot; title=&quot;Pow&quot;&gt;Pow&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Rnd&quot; title=&quot;Rnd&quot;&gt;Rnd&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Seed&quot; title=&quot;Seed&quot;&gt;Seed&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Sgn&quot; title=&quot;Sgn&quot;&gt;Sgn&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Sin&quot; title=&quot;Sin&quot;&gt;Sin&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Sinr&quot; title=&quot;Sinr&quot;&gt;Sinr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Sqrt&quot; title=&quot;Sqrt&quot;&gt;Sqrt&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Tan&quot; title=&quot;Tan&quot;&gt;Tan&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Tanr&quot; title=&quot;Tanr&quot;&gt;Tanr&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/TWOPI&quot; title=&quot;TWOPI&quot;&gt;TWOPI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Container classes: &lt;a class=&quot;int&quot; href=&quot;/List&quot; title=&quot;List&quot;&gt;List&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FloatList&quot; title=&quot;FloatList&quot;&gt;FloatList&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/IntList&quot; title=&quot;IntList&quot;&gt;IntList&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StringList&quot; title=&quot;StringList&quot;&gt;StringList&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Map&quot; title=&quot;Map&quot;&gt;Map&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FloatMap&quot; title=&quot;FloatMap&quot;&gt;FloatMap&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/IntMap&quot; title=&quot;IntMap&quot;&gt;IntMap&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StringMap&quot; title=&quot;StringMap&quot;&gt;StringMap&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Set&quot; title=&quot;Set&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FloatSet&quot; title=&quot;FloatSet&quot;&gt;FloatSet&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/IntSet&quot; title=&quot;IntSet&quot;&gt;IntSet&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StringSet&quot; title=&quot;StringSet&quot;&gt;StringSet&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Stack&quot; title=&quot;Stack&quot;&gt;Stack&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FloatStack&quot; title=&quot;FloatStack&quot;&gt;FloatStack&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/IntStack&quot; title=&quot;IntStack&quot;&gt;IntStack&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StringStack&quot; title=&quot;StringStack&quot;&gt;StringStack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Language types: &lt;a class=&quot;int&quot; href=&quot;/Array&quot; title=&quot;Array&quot;&gt;Array&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Float&quot; title=&quot;Float&quot;&gt;Float&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Int&quot; title=&quot;Int&quot;&gt;Int&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Object&quot; title=&quot;Object&quot;&gt;Object&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/String&quot; title=&quot;String&quot;&gt;String&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;The opengl module  &lt;a class=&quot;int&quot; href=&quot;/The_opengl_module&quot; title=&quot;The opengl module&quot;&gt;(more...)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;APIs: &lt;a class=&quot;int&quot; href=&quot;/GLES11&quot; title=&quot;GLES11&quot;&gt;GLES11&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GLES20&quot; title=&quot;GLES20&quot;&gt;GLES20&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Classes and functions: &lt;a class=&quot;int&quot; href=&quot;/DataBuffer&quot; title=&quot;DataBuffer&quot;&gt;DataBuffer&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadImageData&quot; title=&quot;LoadImageData&quot;&gt;LoadImageData&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The os module  &lt;a class=&quot;int&quot; href=&quot;/The_os_module&quot; title=&quot;The os module&quot;&gt;(more...)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Functions: &lt;a class=&quot;int&quot; href=&quot;/AppArgs&quot; title=&quot;AppArgs&quot;&gt;AppArgs&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/AppPath&quot; title=&quot;AppPath&quot;&gt;AppPath&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ChangeDir&quot; title=&quot;ChangeDir&quot;&gt;ChangeDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/CopyDir&quot; title=&quot;CopyDir&quot;&gt;CopyDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/CopyFile&quot; title=&quot;CopyFile&quot;&gt;CopyFile&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/CreateDir&quot; title=&quot;CreateDir&quot;&gt;CreateDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/CurrentDir&quot; title=&quot;CurrentDir&quot;&gt;CurrentDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DeleteDir&quot; title=&quot;DeleteDir&quot;&gt;DeleteDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/DeleteFile&quot; title=&quot;DeleteFile&quot;&gt;DeleteFile&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/Execute&quot; title=&quot;Execute&quot;&gt;Execute&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ExitApp&quot; title=&quot;ExitApp&quot;&gt;ExitApp&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/ExtractDir&quot; title=&quot;ExtractDir&quot;&gt;ExtractDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FileSize&quot; title=&quot;FileSize&quot;&gt;FileSize&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FileTime&quot; title=&quot;FileTime&quot;&gt;FileTime&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/FileType&quot; title=&quot;FileType&quot;&gt;FileType&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/GetEnv&quot; title=&quot;GetEnv&quot;&gt;GetEnv&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadDir&quot; title=&quot;LoadDir&quot;&gt;LoadDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/LoadString&quot; title=&quot;LoadString&quot;&gt;LoadString&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/RealPath&quot; title=&quot;RealPath&quot;&gt;RealPath&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SaveString&quot; title=&quot;SaveString&quot;&gt;SaveString&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/SetEnv&quot; title=&quot;SetEnv&quot;&gt;SetEnv&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StripAll&quot; title=&quot;StripAll&quot;&gt;StripAll&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StripDir&quot; title=&quot;StripDir&quot;&gt;StripDir&lt;/a&gt; &lt;a class=&quot;int&quot; href=&quot;/StripExt&quot; title=&quot;StripExt&quot;&gt;StripExt&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The iOS target</title>
<link>http://blitz-wiki.appspot.com/The_iOS_target</link>
<guid>http://blitz-wiki.appspot.com/The_iOS_target</guid>
<pubDate>Wed, 25 Jan 2012 05:25:02 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The iOS target&lt;/h1&gt;
&lt;p&gt;iOS is Appleâ€™s OS for iTouch, iPhone and iPad devices.&lt;/p&gt;
&lt;h2&gt;You will need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apple Mac computer runnning OS X 10.6 or better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/nz/app/xcode/id448457090?mt=12&quot;&gt;XCode&lt;/a&gt; developer tools with iOS SDK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;You can develop programs on the iPhone simulator free of charge.&lt;/p&gt;
&lt;p&gt;To be able to download iOS programs to actual iOS devices, you will need to join Appleâ€™s developer program which currently costs about $100USD per year.&lt;/p&gt;
&lt;p&gt;To actually run a Monkey app on a real iDevice, you will need to manually open the output xcode project (.buid/ios/MonkeyGame.xcodeproj) in xcode, select &#39;device&#39; as the target and build and run.&lt;/p&gt;
&lt;p&gt;To modify supported device orientations - for example, to force landscape mode for an app - you will need to edit the projectâ€™s info.plist in xcode.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The Flash Target</title>
<link>http://blitz-wiki.appspot.com/The_Flash_Target</link>
<guid>http://blitz-wiki.appspot.com/The_Flash_Target</guid>
<pubDate>Mon, 23 Jan 2012 00:34:28 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description></description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The XNA target</title>
<link>http://blitz-wiki.appspot.com/The_XNA_target</link>
<guid>http://blitz-wiki.appspot.com/The_XNA_target</guid>
<pubDate>Wed, 25 Jan 2012 05:10:31 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The XNA target&lt;/h1&gt;
&lt;p&gt;Games written for the XNA target will be able to run on Windows, XBox360 and Windows Phone 7.&lt;/p&gt;
&lt;h2&gt;You will need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vista / Windows 7 PC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/download/en/details.aspx?id=23714&quot;&gt;Microsoft XNA Game Studio 4&lt;/a&gt; download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to run your XNA games on Xbox360 or Windows Phone 7 hardware, or publish your games on Xbox live, you will also need a &lt;a href=&quot;http://create.msdn.com/en-US/&quot;&gt;XNA Creators Club&lt;/a&gt; membership.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;The MSBUILD_PATH var in your trans config file must be correctly set to use the XNA target. Please see the trans tool for more information about the trans config file.&lt;/p&gt;
&lt;p&gt;To be able to download XNA programs to the XBox360 or Windows Phone 7, you will need to join Microsoftâ€™s developer program which currently costs about $100USD per year. However, you can still develop XNA programs for Windows free of charge, and run XNA programs on the Windows Phone 7 simulator.&lt;/p&gt;
&lt;p&gt;To create a Windows Phone 7 project, you&#39;ll need to manually &#39;Create Copy of Project for Windows Phone 7&#39; from within VC#2010 - right click on the &#39;MonkeyGame&#39; project in the solution explorer to do this. Do this for the XNA project in your &#39;.build&#39; directory, not the project in the &#39;targets&#39; directory.&lt;/p&gt;
&lt;p&gt;To modify the size and settings of the XNA game window, you will need to modify the file Program.cs in the &#39;.build/xna/MonkeyGame/MonkeyGame&#39; directory.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>The Flash target</title>
<link>http://blitz-wiki.appspot.com/The_Flash_target</link>
<guid>http://blitz-wiki.appspot.com/The_Flash_target</guid>
<pubDate>Sat, 28 Jan 2012 21:59:58 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;The Flash target&lt;/h1&gt;
&lt;p&gt;Flash is a very popular web based platform by Adobe.&lt;/p&gt;
&lt;h2&gt;You will need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4&quot;&gt;Flex SDK&lt;/a&gt; open source compiler tools from Adobe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://java.sun.com/javase/downloads/widget/jdk6.jsp&quot;&gt;Java SE&lt;/a&gt; development kit 6.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;FLEX_PATH&lt;/code&gt; var in your &lt;a class=&quot;int&quot; href=&quot;/Trans&quot; title=&quot;Trans&quot;&gt;Trans&lt;/a&gt; config file must be set correctly.&lt;/p&gt;
&lt;p&gt;To modify the size and layout of Flash Monkey apps, you will need to modify the MonkeyGame.as file in your app&#39;s .build/flash directory.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Monkey Publishing Guide</title>
<link>http://blitz-wiki.appspot.com/Monkey_Publishing_Guide</link>
<guid>http://blitz-wiki.appspot.com/Monkey_Publishing_Guide</guid>
<pubDate>Mon, 23 Jan 2012 08:38:35 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h1&gt;Monkey Publishing Guide&lt;/h1&gt;
&lt;p&gt;A mouse game, a touch game and a button mashing gamepad game are three, distinctly unique instances of game design. &lt;/p&gt;
&lt;p&gt;An ecosystem of publishers and advertising models exists for each basic type so it&#39;s best to think first of the game type you aim to develop.&lt;/p&gt;
&lt;p&gt;With that considered the monkey target options can be chosen.&lt;/p&gt;
&lt;h2&gt;Mouse Games&lt;/h2&gt;
&lt;p&gt;The Flash target provides excellent audio system and graphics performance on 99% of desktop web browsers. The Flex compiler chain is free from Adobe and the flash game industry is a mature game publishing environment that can deliver a good income.&lt;/p&gt;
&lt;p&gt;Bigger games with more resources and higher definition graphics can be built with XNA target to produce Games For Windows.&lt;/p&gt;
&lt;p&gt;For the Mac desktop the monkey GLFW target can be used to build apps for the Mac App Store.&lt;/p&gt;
&lt;h2&gt;Touch Games&lt;/h2&gt;
&lt;p&gt;For tablet and phone, the iOS, Android and XNA targets represent three device types that include a variety of charges and rewards for the finger innovator.&lt;/p&gt;
&lt;p&gt;The free option is to use the Monkey Demo version to build HTML5 web apps that run on target and phone browsers. &lt;/p&gt;
&lt;p&gt;The cheapest option is Android with it&#39;s free development tools, low cost devices and cheap entry application store.&lt;/p&gt;
&lt;p&gt;Those that can afford Mac equipment and want a better chance of being the next big thing often choose to focus on iOS and Apple&#39;s developer friendly App Store. &lt;/p&gt;
&lt;p&gt;Instead of releasing for multiple targets developers should consider a single target platform and the multiple releases required for each. Trying out a variety of ideas on a single target market may be a quicker road to success than pitching a single idea at multiple markets.&lt;/p&gt;
&lt;h2&gt;Button Mashers&lt;/h2&gt;
&lt;p&gt;Arcade game development teams wanting to get noticed by the big boys can do no worse than getting published on XBox360. Microsoft provide a low cost entry point to those wishing to be prototyping in their living rooms in front of the big screen.&lt;/p&gt;
&lt;h2&gt;Target Installation Guides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_Flash_target&quot; title=&quot;The Flash target&quot;&gt;The Flash target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_XNA_target&quot; title=&quot;The XNA target&quot;&gt;The XNA target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_iOS_target&quot; title=&quot;The iOS target&quot;&gt;The iOS target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_Android_target&quot; title=&quot;The Android target&quot;&gt;The Android target&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_GLFW_target&quot; title=&quot;The GLFW target&quot;&gt;The GLFW target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/The_Stdcpp_target&quot; title=&quot;The Stdcpp target&quot;&gt;The Stdcpp target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example Monkey Games&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://marketplace.xbox.com/en-US/Product/Ninjah/66acd000-77fe-1000-9115-d80258550958&quot;&gt;Ninjah&lt;/a&gt; written in Monkey, hosted on xbox.com.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/nz/app/zombie-trailer-park/id398941864?mt=8&quot;&gt;Zombie Trailer Park&lt;/a&gt; written in Monkey, hosted on itunes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>First Monkey Steps</title>
<link>http://blitz-wiki.appspot.com/First_Monkey_Steps</link>
<guid>http://blitz-wiki.appspot.com/First_Monkey_Steps</guid>
<pubDate>Thu, 2 Feb 2012 18:29:52 +0000</pubDate>
<author>nitrologic@gmail.com</author>
<description>&lt;h1&gt;First Monkey Steps&lt;/h1&gt;
&lt;p&gt;Skid spills some source...&lt;/p&gt;
&lt;h2&gt;Main&lt;/h2&gt;
&lt;p&gt;We begin with the smallest monkey program.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Function Main()
    Print &quot;Hello&quot;
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In which, with the HTML5 target selected, we verify we are able to create and view our monkey developments. &lt;/p&gt;
&lt;p&gt;To learn more about the Main entry point of a program make sure you read the Programs and Declarations section of the &lt;a class=&quot;int&quot; href=&quot;/Language_reference&quot; title=&quot;Language reference&quot;&gt;Language reference&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Game App&lt;/h2&gt;
&lt;p&gt;We now build a mojo &lt;a class=&quot;int&quot; href=&quot;/App&quot; title=&quot;App&quot;&gt;App&lt;/a&gt; which we call Game (in monkey class names are typically capitalized).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import mojo

Class Game Extends App

    Method OnCreate()
        Print &quot;hello&quot;
    End

End

Function Main()
    New Game()
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A mojo &lt;a class=&quot;int&quot; href=&quot;/App&quot; title=&quot;App&quot;&gt;App&lt;/a&gt; is used to provide us methods of input, graphics and sound. The framework above creates a single App using the Game class definition.&lt;br /&gt;
&lt;/p&gt;
&lt;h1&gt;Spiral animation&lt;/h1&gt;
&lt;p&gt;With our game object defined we extend the basic Update and Render parts of the app.&lt;/p&gt;
&lt;p&gt;The minimum requirements for an animating monkey application are an &lt;a class=&quot;int&quot; href=&quot;/App&quot; title=&quot;App&quot;&gt;App&lt;/a&gt; implementing the methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/App.OnCreate&quot; title=&quot;App.OnCreate&quot;&gt;App.OnCreate&lt;/a&gt; must call &lt;a class=&quot;int&quot; href=&quot;/SetUpdateRate&quot; title=&quot;SetUpdateRate&quot;&gt;SetUpdateRate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/App.OnUpdate&quot; title=&quot;App.OnUpdate&quot;&gt;App.OnUpdate&lt;/a&gt; can use mojo input commands&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;int&quot; href=&quot;/App.OnRender&quot; title=&quot;App.OnRender&quot;&gt;App.OnRender&lt;/a&gt; can use mojo drawing commands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following draws an animated spiral shape using the &lt;a class=&quot;int&quot; href=&quot;/DrawRect&quot; title=&quot;DrawRect&quot;&gt;DrawRect&lt;/a&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Import mojo

Class Game Extends App

    &#39; radial sprial with axis aligned phase

    Function DrawSpiral(clock)
        Local w=DeviceWidth/2
        For Local i#=0 Until w*1.5 Step .2
            Local x#,y#
            x=w+i*Sin(i*3+clock)
            y=w+i*Cos(i*2+clock)
            DrawRect  x,y,1,1
        Next
    End

    Field updateCount

    Method OnCreate()
        Print &quot;spiral&quot;

        SetUpdateRate 60
    End

    Method OnUpdate()
        updateCount+=1
    End

    Method OnRender()
        Cls
        DrawSpiral updateCount
        DrawSpiral updateCount*1.1
    End

End

Function Main()
    New Game()
End
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each spiral drawn by the program begins at the middle of the screen and spirals out using the Maths functions &lt;a class=&quot;int&quot; href=&quot;/Sin&quot; title=&quot;Sin&quot;&gt;Sin&lt;/a&gt; and &lt;a class=&quot;int&quot; href=&quot;/Cos&quot; title=&quot;Cos&quot;&gt;Cos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;View the &lt;a href=&quot;http://commondatastorage.googleapis.com/monkeycoder.co.nz/blitz-wiki/spiral/MonkeyGame.html&quot;&gt;Spiral&lt;/a&gt; animation fully built.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>Language reference</title>
<link>http://blitz-wiki.appspot.com/Language_reference</link>
<guid>http://blitz-wiki.appspot.com/Language_reference</guid>
<pubDate>Thu, 2 Feb 2012 05:10:05 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Monkey language reference&lt;/h1&gt;
&lt;p&gt;This manual describes the syntax and general concepts behind the core Monkey language.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#about&quot;&gt;About this reference&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#programs&quot;&gt;Programs and declarations&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#strict&quot;&gt;Strict mode&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#identifiers&quot;&gt;Identifiers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#types&quot;&gt;Types&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#constants&quot;&gt;Constants&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#statements&quot;&gt;Statements&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#functions&quot;&gt;Function&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#methods&quot;&gt;Methods&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#classes&quot;&gt;Classes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#generics&quot;&gt;Generics&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#interfaces&quot;&gt;Interfaces&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#modules&quot;&gt;Modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#visibility&quot;&gt;Public and private&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#extern&quot;&gt;External declarations&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#memory&quot;&gt;Memory management&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#preprocessor&quot;&gt;Preprocessor&lt;/a&gt;&lt;/p&gt;
&lt;a name=&quot;about&quot;&gt;

&lt;h2&gt;About this reference&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A monospaced font is used for program code examples, for example:&lt;/p&gt;
&lt;pre&gt;
Function Main()
    Print &quot;Hello World!&quot;
End
&lt;/pre&gt;

&lt;p&gt;Language syntax explanations are generally formatted as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anything that appears in &lt;code&gt;bold&lt;/code&gt; indicates literal text. For example: &lt;code&gt;Function&lt;/code&gt; means the actual text &#39;Function&#39;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything that appears in &lt;em&gt;italics&lt;/em&gt; indicates other syntax. For example: &lt;em&gt;Identifier&lt;/em&gt; means any text that is a valid identifier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything that appears in square brackets [ ] is optional. For example: [ &lt;code&gt;Step&lt;/code&gt; ] means the literal text &lt;code&gt;Step&lt;/code&gt; is optional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The pipe character | is use for alternatives. For example: &lt;code&gt;To&lt;/code&gt; | &lt;code&gt;Until&lt;/code&gt; means you can use &lt;code&gt;To&lt;/code&gt; or &lt;code&gt;Until&lt;/code&gt; - but not both.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A three dots ellipsis â€¦ is used to indicate repetition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These rules are not strictly followed. Where it makes sense to do so, syntax may be shown in a simplified form with explanatory notes.&lt;/p&gt;
&lt;a name=&quot;programs&quot;&gt;

&lt;h2&gt;Programs and declarations&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A Monkey program consists of one or more modules, each of which is a separate file, consisting of a series of declarations. &lt;/p&gt;
&lt;p&gt;A declaration associates a &#39;meaning&#39; with an identifier. For example, this declaration...&lt;/p&gt;
&lt;pre&gt;
Global x:Int
&lt;/pre&gt;

&lt;p&gt;...indicates that the identifier &#39;x&#39; is a global variable of type &#39;Int&#39; (an integer).&lt;/p&gt;
&lt;p&gt;Monkey supports the following kinds of declarations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;Constants&lt;/li&gt;
&lt;li&gt;Local, Global and Field variables&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Functions &lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A module is itself a kind of declaration and is represented by a single source file. The name of the module is taken from the name of the source file. For example, if your file is named &quot;particles.monkey&quot; then the module will be called &quot;particles&quot;.&lt;/p&gt;
&lt;p&gt;Modules may &#39;import&#39; other modules, which may in turn import other modules and so on.&lt;/p&gt;
&lt;p&gt;Every Monkey program has a &#39;main module&#39; that must contain a public function called Main that takes no parameters and returns an integer. For example:&lt;/p&gt;
&lt;pre&gt;
Function Main()
    Print &quot;That&#39;s all folks!&quot;
End
&lt;/pre&gt;

&lt;p&gt;This is the entry point of the program and is where program execution begins. &lt;/p&gt;
&lt;p&gt;If you are using the mojo framework of modules, you must create a new class (which extends the base mojo.app class) and create a new instance of it in the Main function.&amp;nbsp; See the mojo.app Module Reference for more information.&amp;nbsp; An example of this is:&lt;/p&gt;
&lt;pre&gt;
Import mojo.app
Import mojo.graphics

Class MyApp Extends App
    Method OnRender()
        DrawText &quot;Hello World!&quot;,0,0
    End
End

Function Main()
        New MyApp
End
&lt;/pre&gt;

&lt;a name=&quot;strict&quot;&gt;

&lt;h2&gt;Strict mode&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;By default, Monkey allows you to take certain shortcuts when programming.&lt;/p&gt;
&lt;p&gt;However, Monkey also offers a special Strict mode for programmers who prefer a stricter language definition.&lt;/p&gt;
&lt;p&gt;The differences between strict and non-strict mode are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In non-strict mode, variable type, function return type and function parameter types can be optionally omitted. In this case they will default to Int. In strict mode, you must always specify the type of all variables, functions return values and function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In non-strict mode, Return statements can be omitted at the end of a function. In this case, a Return statement will be automatically generated that will return an appropriate default value for the function type. That is, False for bool, 0 for int and float, &quot;&quot; for string, [] for arrays and Null for objects. In strict mode, a function that does not return Void must end with a Return statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In non-strict mode, the brackets around function call parameters are optional if the function is being used as a statement, or if the function can be called with no parameters. In strict mode, all function call parameters must be enclosed in brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use strict mode, a Strict directive must be placed at the very top of your module. For example:&lt;/p&gt;
&lt;pre&gt;
Strict

Function Main:Int()                     &#39;in Strict mode, the :Int type definition is compulsory
   Print( &quot;Strict mode is...strict!&quot; )  &#39;in Strict mode, all function calls require brackets.
   Return 0                             &#39;in strict mode, we MUST return a value.
End
&lt;/pre&gt;

&lt;p&gt;The examples in this document will be presented in non-strict form.&lt;/p&gt;
&lt;a name=&quot;comments&quot;&gt;

&lt;h2&gt;Comments&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;You can add line comments to your programs using the &#39; (apostrophe) character. Everything following the &#39; character until the end of the line will be ignored.&lt;/p&gt;
&lt;p&gt;You can add block comments to your programs using #rem and #end. These must appear at the start of a new line, although they may optionally have whitespace characters in front. Everything between #rem and #end will be ignored. Block comments can also be nested.&lt;/p&gt;
&lt;p&gt;Here is an example of using comments:&lt;/p&gt;
&lt;pre&gt;
Print &quot;Hello World&quot;                 &#39;This is a line comment!

#rem                                &#39;start of a block comment
Print &quot;The sound of silence!&quot;       &#39;inside a block comment
#end                                &#39;end of a block comment
&lt;/pre&gt;

&lt;a name=&quot;identifiers&quot;&gt;

&lt;h2&gt;Identifiers&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Identifiers must start with an alphabetic character, or a single underscore followed by an alphabetic character. The rest of the identifier may contain any combination of alphanumeric characters and/or underscores.&lt;/p&gt;
&lt;p&gt;Identifiers are case sensitive (except for language keywords - see below). For example, player, Player, PLAYER and PLayER are all different identifiers. This allows you to reuse the same name for different purposes. For example, Actor may refer to a class while actor refers to an object of that class.&lt;/p&gt;
&lt;p&gt;Here are some examples of valid Monkey identifiers:&lt;/p&gt;
&lt;pre&gt;
score
player1
player_up
_internal
helloworld
HelloWorld
&lt;/pre&gt;

&lt;h3&gt;Language keywords and reserved identifiers&lt;/h3&gt;
&lt;p&gt;The following identifiers are language keywords and are reserved for use by the Monkey language:&lt;/p&gt;
&lt;pre&gt;
Void Strict Public Private Property Bool Int Float String Array
Object Mod Continue Exit Import Extern New Self Super 
Eachin True False Not Extends Abstract Final Select Case Default
Const Local Global Field Method Function Class And Or Shl Shr
End If Then Else ElseIf EndIf While Wend Repeat Until Forever 
For To Step Next Return Module Interface Implements Inline
&lt;/pre&gt;

&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/keywords&quot; title=&quot;keywords&quot;&gt;Language keywords&lt;/a&gt; are case insensitive - for example, you may use the keyword function, Function or indeed even fUNCTION (not recommended) to declare a function.&lt;/p&gt;
&lt;p&gt;The keywords Module, Interface, Implements, Inline and Array are not currently used by the Monkey language but are reserved for future use.&lt;/p&gt;
&lt;h3&gt;Monkey naming conventions&lt;/h3&gt;
&lt;p&gt;The standard Monkey modules use a simple naming convention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All-caps case (eg: &#39;ALLCAPS&#39; ): Constants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pascal case (eg: &#39;PascalCase&#39; ): Globals, functions, class, methods, properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Camel case (eg: &#39;camelCase&#39; ): Fields, locals and function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You are of course free to use your own convention, but for the sake of consistency it is recommended that this convention be used for the public interface of any modules you create intended for use by the Monkey community.&lt;/p&gt;
&lt;a name=&quot;types&quot;&gt;

&lt;h2&gt;Types&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Monkey is a statically typed language, which means that all variables, function parameters, function return values and expressions have an associated type that is known at compile time.&lt;/p&gt;
&lt;p&gt;The following types are supported:&lt;/p&gt;
&lt;p&gt;Boolean&lt;br /&gt;
Integer&lt;br /&gt;
Floating point&lt;br /&gt;
String&lt;br /&gt;
Array&lt;br /&gt;
Object&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;The Bool type&lt;/h3&gt;
&lt;p&gt;Values of type Bool are boolean values used to express the result of conditional expressions, such as the comparison operators, and to represent a true/false &#39;state&#39; in general.&amp;nbsp; A boolean value can only be either True or False. &lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of boolean type is &lt;code&gt;Bool&lt;/code&gt;.&amp;nbsp; For example:&lt;/p&gt;
&lt;pre&gt;
Local gamePaused:Bool = False
&lt;/pre&gt;

&lt;p&gt;Boolean values are usually generated by the use of the comparison operators, for example:&lt;/p&gt;
&lt;pre&gt;
If livesLeft&lt;&gt;0
    doSomething()
End
&lt;/pre&gt;

&lt;p&gt;However, in some circumstances Monkey will automatically convert a non-bool value to bool. This will occur when evaluating an expression for use with the If or While statements; the Until part of a Repeat loop; and when evaluating the arguments for the Not, Or and And operators. For example:&lt;/p&gt;
&lt;pre&gt;
If livesLeft
    doSomething()
End
&lt;/pre&gt;

&lt;p&gt;See the conversions section in the expressions chapter for more information.&lt;/p&gt;
&lt;h3&gt;The Int type&lt;/h3&gt;
&lt;p&gt;Values of type Int are signed integer values - that is, values with no fractional part. The range of integer values supported is target dependent, but is at least 32 bits. A 32 bit int can represent a range of values from: -2,147,483,648 to 2,147,483,647&lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of integer type is &lt;code&gt;Int&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;
Local x:Int = 5
&lt;/pre&gt;

&lt;p&gt;Integer literals are sequences of digits without a fractional part. Hexadecimal literals are also supported with the $ prefix. For example, the following are all valid integer literals:&lt;/p&gt;
&lt;pre&gt;
0
1234
$3D0DEAD
$CAFEBABE
&lt;/pre&gt;

&lt;h3&gt;The Float type&lt;/h3&gt;
&lt;p&gt;Values of type Float are signed numeric values with both an integer and fractional part. The range of floating point values support is target dependent, but is at least 32 bits.&lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of floating point type is &lt;code&gt;Float&lt;/code&gt;.&amp;nbsp; For example:&lt;/p&gt;
&lt;pre&gt;
Local gravity:Float = 9.81
&lt;/pre&gt;

&lt;p&gt;Floating point literals are sequences of digits that include a fractional part, for example:&lt;/p&gt;
&lt;pre&gt;
.0
0.0
.5
0.5
1.0
1.5
1.00001
3.14159265
&lt;/pre&gt;

&lt;h3&gt;The String type&lt;/h3&gt;
&lt;p&gt;Values of type String are used to represent sequences of characters, such as text. The size of each character in a string value is target dependent, but is at least 8 bits.&lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of string type is &lt;code&gt;String&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;
Local name:String = &quot;John Smith&quot;
&lt;/pre&gt;

&lt;p&gt;Strings are immutable meaning that once they are created they cannot be modified. Operations that &#39;modify&#39; a string will always return a new string.&lt;/p&gt;
&lt;p&gt;String literals are sequences of characters enclosed in &quot;&quot; (quotation marks). String literals may also include escape sequences - special sequences of characters used to represent unprintable characters.&lt;/p&gt;
&lt;p&gt;You can use the following escape sequences in string literals:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Escape sequence&lt;/th&gt;&lt;th&gt;Character code&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~q&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 34 (quotate mark &quot;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~n&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 10 (newline)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~r&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 13 (return)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~t&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 9 (tab)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~z&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 0 (null&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~~&lt;/code&gt;&lt;/td&gt;&lt;td&gt; 126 (tilde ~)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Here are some examples of string literals:&lt;/p&gt;
&lt;pre&gt;
&quot;Hello World&quot;
&quot;~qHello World~q&quot;
&quot;~tIndented~n&quot;
&lt;/pre&gt;

&lt;p&gt;Strings can also be indexed and sliced.&lt;/p&gt;
&lt;p&gt;The syntax for indexing a string is: &lt;em&gt;StringExpression&lt;/em&gt; &lt;code&gt;[&lt;/code&gt; &lt;em&gt;IndexExpression&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Indexing a string returns the character code of the character at IndexExpression. Index 0 is the first character in the string.&lt;/p&gt;
&lt;p&gt;IndexExpression must be greater than or equal to 0 and less than the length of StringExpression otherwise an error occurs.&lt;/p&gt;
&lt;p&gt;Here are some examples of indexing a string:&lt;/p&gt;
&lt;pre&gt;
Print &quot;ABC&quot;[0]        &#39;prints 65 - the character code of &#39;A&#39;
Print &quot;ABC&quot;[1]        &#39;prints 66 - the character code of &#39;B&#39;
Print &quot;Hi~n&quot;[2]        &#39;prints 10 - the character code of &#39;~n&#39;
&lt;/pre&gt;

&lt;p&gt;The syntax for slicing a string is: &lt;em&gt;StringExpression&lt;/em&gt;&lt;code&gt;[&lt;/code&gt; &lt;em&gt;StartExpression&lt;/em&gt;&lt;code&gt;..&lt;/code&gt;&lt;em&gt;EndExpression&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Slicing a string returns a new string consisting of the characters within StringExpression starting at index StartExpression and ending at index EndExpression.&lt;/p&gt;
&lt;p&gt;Both StartExpression and EndExpression are optional. If StartExpression is omitted, it defaults to 0. If EndExpression is omitted, it defaults to the length of the string.&lt;/p&gt;
&lt;p&gt;StartExpression and EndExpression can also be negative, in which case they refer to offsets from the end of the string.&lt;/p&gt;
&lt;p&gt;Here are some examples of slicing a string:&lt;/p&gt;
&lt;pre&gt;
Print &quot;Hello World&quot;[4..7]     &#39;prints &quot;o W&#39;
Print &quot;Hello World&quot;[..5]    &#39;prints &quot;Hello&quot;
Print &quot;Hello World&quot;[5..]    &#39;prints &quot;World&quot;
Print &quot;Hello World&quot;[..]        &#39;prints &quot;Hello World&quot;
&lt;/pre&gt;

&lt;p&gt;Strings also support a number of &#39;pseudo&#39; methods and functions:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Method/Function&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Length() Property&lt;/td&gt;&lt;td&gt; Returns the number of characters in the string.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Compare( str:String )&lt;/td&gt;&lt;td&gt; Returns a value &lt;0 if the current string is less than str, a value&gt;0 if the current string is greater than str or 0 if this string is equal to str.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Find( subString:String )&lt;/td&gt;&lt;td&gt; Returns the index of the first occurance of subString within the current string.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Find( subString:String, startIndex )&lt;/td&gt;&lt;td&gt; Returns the index of the first occurance of subString within the current string, starting at index startIndex.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method FindLast( subString:String )&lt;/td&gt;&lt;td&gt; Returns the index of the last occurance of subString within the current string.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method FindLast( subString:String, startIndex )&lt;/td&gt;&lt;td&gt; Returns the index of the last occurance of subString within the current string, starting at index startIndex.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Contains( subString:String )&lt;/td&gt;&lt;td&gt; Returns true if the current string contains subString.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method StartsWith( subString:String )&lt;/td&gt;&lt;td&gt; Returns true if the current string starts with subString.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method EndsWith( subString:String )&lt;/td&gt;&lt;td&gt; Returns true if the current string ends with subString.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method ToLower:String()&lt;/td&gt;&lt;td&gt; Returns the current string converted to lowercase.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method ToUpper:String()&lt;/td&gt;&lt;td&gt; Returns the current string converted to uppercase.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Trim:String()&lt;/td&gt;&lt;td&gt; Returns the current string with all leading and trailing whitespace characters removed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Split:String[]( separator:String )&lt;/td&gt;&lt;td&gt; Returns an array of strings that contains the substrings in the current string deliminated by separator.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Join:String( pieces:String[] )&lt;/td&gt;&lt;td&gt; Returns the elements of pieces concatened together with the current string inserted between each substring.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Function FromChar:String( char )&lt;/td&gt;&lt;td&gt; Returns a string of length 1 consisting of a single character code.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Print &quot;  Hello World  ~n&quot;.Trim()    &#39;prints &quot;Hello World&quot;
Print &quot;Hello World&quot;.ToUpper()        &#39;prints &quot;HELLO WORLD&quot;
&lt;/pre&gt;

&lt;h3&gt;The Array type&lt;/h3&gt;
&lt;p&gt;An array is a linear sequence of values that can be addressed using an integer index.&lt;/p&gt;
&lt;p&gt;Each array has an associated element type - that is, the type of the elements actually contained in the array. Due to the nature of Monkey, an array&#39;s element type is a purely static property. It is only known at compile time so arrays cannot be downcast at runtime.&lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of array type is: &lt;em&gt;ElementType&lt;/em&gt; &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Local box:Int[]            &#39;an array of ints
Local ratio:Float[]        &#39;an array of floats
Local thing:Int[][]        &#39;an array of arrays of ints
&lt;/pre&gt;

&lt;p&gt;An array literal is a (possibly empty) comma separated sequence of expressions enclosed with [ and ]. The expressions used in an array literal must be of the same type. For example:&lt;/p&gt;
&lt;pre&gt;
Local box:Int[]=[]                &#39;an empty array literal
Local scores:Int[]=[10,20,30]        &#39;a comma separated sequence
Local text:String[]=[&quot;Hello&quot;,&quot;There&quot;,&quot;World&quot;]        &#39;a comma separated sequence
&lt;/pre&gt;

&lt;p&gt;The syntax for indexing an array is: &lt;em&gt;ArrayExpression&lt;/em&gt; &lt;code&gt;[&lt;/code&gt; &lt;em&gt;IndexExpression&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;.&amp;nbsp; For example:&lt;/p&gt;
&lt;pre&gt;
Local score:Int[]=[10,20,30]        &#39;a comma separated sequence
Print score[1]                        &#39;prints &quot;20&quot;
&lt;/pre&gt;

&lt;p&gt;Indexing an array yields a &#39;pseudo variable&#39; of the array&#39;s element type that can be both read from and written to.&lt;/p&gt;
&lt;p&gt;IndexExpression must be an integer expression greater than or equal to 0 and less than the length of the array otherwise an error occurs.&lt;/p&gt;
&lt;p&gt;Like strings, arrays can also be sliced. The syntax for slicing an array is: &lt;em&gt;ArrayExpression&lt;/em&gt; &lt;code&gt;[&lt;/code&gt; &lt;em&gt;StartExpression&lt;/em&gt; &lt;code&gt;..&lt;/code&gt; &lt;em&gt;EndExpression&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Slicing an array returns &#39;sub array&#39; of ArrayExpression starting at index StartExpression and ending at index EndExpression.&lt;/p&gt;
&lt;p&gt;Both StartExpression and EndExpression are optional. If StartExpression is omitted, it defaults to 0. If EndExpression is omitted, it defaults to the length of the array.&lt;/p&gt;
&lt;p&gt;StartExpression and EndExpression can also be negative, in which case they refer to offsets from the end of the array.&lt;/p&gt;
&lt;p&gt;Here is an example of slicing an array:&lt;/p&gt;
&lt;pre&gt;
Local text:String[]=[&quot;Cruel&quot;,&quot;Hello&quot;,&quot;World&quot;,&quot;There&quot;]    &#39;a comma separated sequence

Local helloWorld:=text[1..3]                            &#39;contains [&quot;Hello&quot;,&quot;World&quot;]
&lt;/pre&gt;

&lt;p&gt;Arrays also support a number of pseudo methods:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Length() Property&lt;/td&gt;&lt;td&gt; The number of elements in the array.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Method Resize:Array( newLength )&lt;/td&gt;&lt;td&gt; Copies the first newLength elements of the current array into a new array of length newLength, and returns the new array.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Local text:String[]=[&quot;Hello&quot;,&quot;There&quot;,&quot;World&quot;]        &#39;a comma separated sequence

Print text.Length                &#39;prints &#39;3&#39;

text=text.Resize( 2 )

Print text.Length                &#39;prints &#39;2&#39;
&lt;/pre&gt;

&lt;h3&gt;The Object type&lt;/h3&gt;
&lt;p&gt;An object is an instance of a class, and contains a set of constants, variables, methods and functions.&lt;/p&gt;
&lt;p&gt;The syntax used for declaring values and variables of object type is: &lt;em&gt;ClassIdentifier&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Local mine:MyClass = New MyClass
&lt;/pre&gt;

&lt;p&gt;Please see the &lt;a href=&quot;#classes&quot;&gt;classes&lt;/a&gt; section for more information on declaring classes and creating objects.&lt;/p&gt;
&lt;a name=&quot;variables&quot;&gt;

&lt;h2&gt;Variables&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A variable is a storage location used to hold values that change while your program runs.&lt;/p&gt;
&lt;p&gt;All variables have an identifier, a type, and an optional initializer - an expression used to set the variable to an initial value.&lt;/p&gt;
&lt;p&gt;The type of a variable can either be declared literally, or can be deduced from the variable&#39;s initializer.&lt;/p&gt;
&lt;h3&gt;Local variables&lt;/h3&gt;
&lt;p&gt;Local variables are temporary variables that disappear when the local scope they are declared in is destroyed.&lt;/p&gt;
&lt;p&gt;Local variables may be declared within any local scope.&lt;/p&gt;
&lt;p&gt;Each of the following creates a local scope:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The statements inside a function or method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The statements inside an If, Else If or If block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The statements inside a Case or Default block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The statements inside a While, Repeat or For loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntax for declaring a local variable is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Local&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;Type&lt;/em&gt; [ &lt;code&gt;=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; ]&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Local&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Local age:Int=10
Local age:=10
&lt;/pre&gt;

&lt;h3&gt;Global variables&lt;/h3&gt;
&lt;p&gt;Global variables are variables that persist during the execution of your program.&lt;/p&gt;
&lt;p&gt;Global variables may be declared at module scope, or within a class declaration.&lt;/p&gt;
&lt;p&gt;The syntax for declaring a global variable is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Global&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;Type&lt;/em&gt; [ &lt;code&gt;=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; ]&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Global&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Global isPlayerAlive:Bool = True
&lt;/pre&gt;

&lt;h3&gt;Field variables&lt;/h3&gt;
&lt;p&gt;Field variables are variables that persist as long as the object they belong to. &lt;/p&gt;
&lt;p&gt;Field variables can only be declared within a class declaration.&lt;/p&gt;
&lt;p&gt;The syntax for declaring a field variable is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Field&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;Type&lt;/em&gt; [ &lt;code&gt;=&lt;/code&gt; Expression ]&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Field&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;a name=&quot;constants&quot;&gt;

&lt;h2&gt;Constants&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A constant is a value that is evaluated at compile time, and that does not change throughout the execution of a program.&lt;/p&gt;
&lt;p&gt;Constants may be declared at module scope, within class scope or within any local scope.&lt;/p&gt;
&lt;p&gt;The syntax for declaring a constant is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Const&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;Type&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Const&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:=&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;a name=&quot;expressions&quot;&gt;

&lt;h2&gt;Expressions&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Expressions are the parts of a program that perform calculations, make logical comparisons and return values from methods or functions.&lt;/p&gt;
&lt;h3&gt;Operators&lt;/h3&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Operator Syntax&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;New&lt;/code&gt; &lt;i&gt;ClassType&lt;/i&gt;&lt;/td&gt;&lt;td&gt;Create a new Object&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;Null&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The null object&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Boolean true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Boolean false&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Self&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Self&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Super&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Super&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;i&gt;Literal&lt;/i&gt;&lt;/td&gt;&lt;td&gt;Literal&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;i&gt;Identifier&lt;/i&gt;&lt;/td&gt;&lt;td&gt;Identifier&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;/code&gt; &lt;i&gt;Identifier&lt;/i&gt;&lt;/td&gt;&lt;td&gt;Scope member access&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(&lt;/code&gt; &lt;i&gt;ExpressionSeq&lt;/i&gt; &lt;code&gt;)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Invoke&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[&lt;/code&gt; &lt;i&gt;Expression&lt;/i&gt; &lt;code&gt;]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Index&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Unary plus&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Unary minus&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise complement&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Not&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Boolean inverse&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Multiplication&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Division&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Mod&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Modulus&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Shl&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise shift left&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Shr&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise shift left (signed)&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Addition&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Subtraction&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise &#39;and&#39;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise &#39;xor&#39;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Bitwise &#39;or&#39;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Equals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than or equals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than or equals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Not equals&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;And&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Condititonal &#39;and&#39;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td colspan=2&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;Or&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Conditional &#39;or&#39;&lt;/td&gt;&lt;/tr&gt;

&lt;/table&gt;

&lt;h3&gt;Balancing argument types&lt;/h3&gt;
&lt;p&gt;When performing binary arithmetic (*, /, Mod, +, -) or comparison operations (=, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, &amp;lt;&amp;gt;), operator arguments are &#39;balanced&#39; according to the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If either operand is not string, float or int, then error,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else if either operand is a string, then the balanced type is string,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else if either operand is a float, then the balanced type is float,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else the balanced type is int.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case of arithmetic operations, arguments are first implicitly converted to the balanced type if necessary, and the result is also of the balanced type.&lt;/p&gt;
&lt;p&gt;In the case of comparison operations, arguments are first implicitly converted to the balanced type if necessary, and the result is boolean.&lt;/p&gt;
&lt;p&gt;The only valid arithmetic operation that can be performed on strings is addition, which performs string concatentation on the arguments.&lt;/p&gt;
&lt;h3&gt;Conditional operators&lt;/h3&gt;
&lt;p&gt;The arguments of conditional operations (And, Or) are first converted to boolean if necessary and the result is boolean.&lt;/p&gt;
&lt;p&gt;In the case of Or, if the left-hand-side expression evaluates to true, the right-hand-side expression is not evaluated.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
If car&lt;&gt;Null Or GetSpeed()&gt;10 Then...
&lt;/pre&gt;

&lt;p&gt;In the above example, if car is not Null, then the right-hand-side of the Or is not evaluated - ie: the GetSpeed function is never called.&lt;/p&gt;
&lt;p&gt;In the case of And, if the left-hand-side expression evaluates to false, the right-hand-side expression is not evaluated.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
If enemies.Count &gt; 0 And HasEnemyInSight() Then ...
&lt;/pre&gt;

&lt;p&gt;In the above example, if enemies.Count is &amp;lt;= 0, then the right-hand-side of the And is not evaluated - ie: the hasEnemyInSight function is never called.&lt;/p&gt;
&lt;h3&gt;Bitwise operators&lt;/h3&gt;
&lt;p&gt;When performing bitwise (Shl Shr &amp;amp; | ~) operations, arguments are first implicitly converted to integers if necessary before the operation is performed. The result is also an integer.&lt;/p&gt;
&lt;h3&gt;Implicit conversions&lt;/h3&gt;
&lt;p&gt;Implicit conversions are automatic conversions performed when assigning a value to a variable, passing parameters to a function, returning a value from a function or when balancing operator operands.&lt;/p&gt;
&lt;p&gt;Monkey supports the following implicit conversions:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Source type&lt;/th&gt;&lt;th&gt;Target type&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;Return 1 if boolean value is true, 0 if false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;Floating point&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Floating point&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;Value is converted by discarding fractional part.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Floating point&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Conversion is target dependent.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Derived class object&lt;/td&gt;&lt;td&gt;Source class object&lt;/td&gt;&lt;td&gt;Upcast operation.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;Explicit conversions&lt;/h3&gt;
&lt;p&gt;Explicit conversions are conversions from one type to another type which can be performed manually by the programmer .&lt;/p&gt;
&lt;p&gt;The syntax for performing an explicit conversion is: &lt;em&gt;TargetType&lt;/em&gt; &lt;code&gt;(&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; &lt;code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Local energyFloat:Float = 120.1000002001

Local energyInt:Int = Int(energyFloat)         &#39;Is 120 now
&lt;/pre&gt;

&lt;p&gt;You can perform the following explicit conversions in Monkey:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Source type&lt;/th&gt;&lt;th&gt;Target type&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Result is true if source&lt;&gt;0, else false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Floating point&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Result is true if source&lt;&gt;0.0, else false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Array&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Result is true if source.Length&lt;&gt;0, else false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Object&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Result is true if source&lt;&gt;Null, else false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;Result is true if source&lt;&gt;&quot;&quot;, else false.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;Conversion is target dependant.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Floating point&lt;/td&gt;&lt;td&gt;Conversion is target dependant.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Base class object&lt;/td&gt;&lt;td&gt;Derived class object&lt;/td&gt;&lt;td&gt;Result is null if source is not a superclass of derived class.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In some circumstances, Monkey will automatically perform an explicit conversion of a non-bool value to bool for you. This will occur when evaluating an expression for use with the If and While statements; the Until part of a Repeat loop; and when evaluating the arguments for the Not, Or and And operators. This allows you to use &#39;shortcut&#39; code such as: If x Then y without the need to compare x with 0, &quot;&quot;, [] or null.&lt;/p&gt;
&lt;h3&gt;Boxing and unboxing conversions&lt;/h3&gt;
&lt;p&gt;A &#39;box&#39; object is an object designed to contain a single primitive int, float or string value. The process of placing a value into a box object is known as &#39;boxing&#39;, while extracting a value from an object is known as &#39;unboxing&#39;. To help with writing box objects, Monkey provides some simple features for boxing and unboxing values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An int, float or string value will be automatically converted to a new box object if that object provides a suitable New( Int ), New( Float ) or New( String ) constructor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An object will be automatically converted to an int, float or string value if that object provides a suitable To:Int(), ToFloat:Float() or ToString:String() method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, here is a simple box class designed to hold an integer value:&lt;/p&gt;
&lt;pre&gt;
Class IntBox
    Field value:Int

Method New( value:Int )
        Self.value=value
    End

Method ToInt:Int()
        Return value
    End
End

Function Main()
    Local box:IntBox
    box=10

Local t:Int=box
    Print t
End
&lt;/pre&gt;

&lt;a name=&quot;statements&quot;&gt;

&lt;h2&gt;Statements&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Program statements may only appear within method or function declarations.&lt;/p&gt;
&lt;p&gt;A ; character may optionally appear after any statement, and multiple statements may be placed on the same source code line if separated by the ; character.&lt;/p&gt;
&lt;h3&gt;If statement&lt;/h3&gt;
&lt;p&gt;The If statement allows you to conditionally execute a block of statements depending on the result of a series of boolean expressions.&lt;/p&gt;
&lt;p&gt;The first boolean expression that evaluates to true will cause the associated block of statements to be executed. No further boolean expressions will be evaluated.&lt;/p&gt;
&lt;p&gt;If no boolean expression evaluates to true, then the final else block will be executed if present.&lt;/p&gt;
&lt;p&gt;The syntax for the If statement is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;If&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; [ &lt;code&gt;Then&lt;/code&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;ElseIf&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; [ &lt;code&gt;Then&lt;/code&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Else&lt;/code&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;EndIf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There may be any number of ElseIf blocks, or none. The final Else block is optional.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;End&lt;/code&gt; or &lt;code&gt;End If&lt;/code&gt; may be used instead of &lt;code&gt;EndIf&lt;/code&gt;, and &lt;code&gt;Else If&lt;/code&gt; may be used instead of &lt;code&gt;ElseIf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addtion, a simple one line version of If is also supported:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;If&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; [ &lt;code&gt;Then&lt;/code&gt; ] &lt;em&gt;Statement&lt;/em&gt; [ &lt;code&gt;Else&lt;/code&gt; &lt;em&gt;statement&lt;/em&gt; ]&lt;/p&gt;
&lt;h3&gt;The Select statement&lt;/h3&gt;
&lt;p&gt;The Select statement allows you to execute a block of statements depending on a series of comparisons.&lt;/p&gt;
&lt;p&gt;The first comparison to produce a match will cause the associated block of statements to be executed.&lt;/p&gt;
&lt;p&gt;If no comparisons produce a match, then the final default block will be executed if present.&lt;/p&gt;
&lt;p&gt;The syntax for the Select statement is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Select&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Case&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt; [ &lt;code&gt;,&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;... ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Default&lt;/code&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;End&lt;/code&gt; [ &lt;code&gt;Select&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;There may be any number of Case blocks, or none. The final Default block is optional. If the default block is present, it must appear after all Case blocks.&lt;/p&gt;
&lt;h3&gt;While loop&lt;/h3&gt;
&lt;p&gt;The While loop allows you to execute a block of statements repeatedly while a boolean expression evaluates to true.&lt;/p&gt;
&lt;p&gt;Note that a While loop may never actually execute any of it&#39;s statements if the expression evaluates to false when the loop is entered.&lt;/p&gt;
&lt;p&gt;The syntax for the While loop is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;While&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Wend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;End&lt;/code&gt; or &lt;code&gt;End While&lt;/code&gt; may be used instead of &lt;code&gt;Wend&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exit and Continue may be used within a While loop to abruptly terminate or continue loop execution.&lt;/p&gt;
&lt;h3&gt;Repeat loop&lt;/h3&gt;
&lt;p&gt;Like the While loop, the Repeat loop also allows you to execute a block of statement repeatedly while a boolean expression evaluates to true.&lt;/p&gt;
&lt;p&gt;However, unlike a While loop, a Repeat loop is guaranteed to execute at least once, as the boolean expression is not evaluated until the end of the loop.&lt;/p&gt;
&lt;p&gt;The syntax for Repeat/Until loops is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Repeat&lt;/code&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Until&lt;/code&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Repeat&lt;/code&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Forever&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Exit and Continue may be used within a While loop to abruptly terminate or continue loop execution.&lt;/p&gt;
&lt;h3&gt;Numeric For loop&lt;/h3&gt;
&lt;p&gt;A numeric For loop will continue executing until the value of a numeric index variable reaches an exit value.&lt;/p&gt;
&lt;p&gt;The index variable is automatically updated every loop iteration by adding a constant step value.&lt;/p&gt;
&lt;p&gt;The syntax for a numeric For loop is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;For&lt;/code&gt; [ &lt;code&gt;Local&lt;/code&gt; ] &lt;em&gt;IndexVariable&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;em&gt;FirstValue&lt;/em&gt; &lt;code&gt;To&lt;/code&gt; | &lt;code&gt;Until&lt;/code&gt; &lt;em&gt;LastValue&lt;/em&gt; [ &lt;code&gt;Step&lt;/code&gt; &lt;em&gt;StepValue&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Next&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;End&lt;/code&gt; or &lt;code&gt;End For&lt;/code&gt; may be used instead of &lt;code&gt;Next&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If present, Local will create a new local index variable that only exists for the duration of the loop. In addition, IndexVariable must include the variable type, or := must be used instead of = to implicitly set the variable&#39;s type.&lt;/p&gt;
&lt;p&gt;If Local is not present, IndexVariable must be a valid, existing variable.&lt;/p&gt;
&lt;p&gt;The use of To or Until determines whether LastValue should be inclusive or exclusive.&lt;/p&gt;
&lt;p&gt;If To is used, the loop will exit once the index variable is greater than LastValue (or less than if StepValue is negative).&lt;/p&gt;
&lt;p&gt;If Until is used, the loop will exit once the index variable is greater than or equal to LastValue (or less than or equal to if StepValue is negative).&lt;/p&gt;
&lt;p&gt;If omitted, StepValue defaults to 1.&lt;/p&gt;
&lt;p&gt;Exit and Continue may be used within a numeric For loop to abruptly terminate or continue loop execution.&lt;/p&gt;
&lt;h3&gt;For EachIn loop&lt;/h3&gt;
&lt;p&gt;A For EachIn loop allows you to iterate through the elements of a collection.&lt;/p&gt;
&lt;p&gt;A collection is either an array, a string, or a specially designed object.&lt;/p&gt;
&lt;p&gt;The syntax for a For EachIn loop is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;For&lt;/code&gt; [ &lt;code&gt;Local&lt;/code&gt; ] &lt;em&gt;IndexVariable&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;EachIn&lt;/code&gt; &lt;em&gt;Collection&lt;/em&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;Next&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;End&lt;/code&gt; or &lt;code&gt;End For&lt;/code&gt; may be used instead of &lt;code&gt;Next&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If present, &lt;code&gt;Local&lt;/code&gt; will create a new local index variable that only exists for the duration of the loop. In addition, IndexVariable must include the variable type, or := must be used instead of = to implicitly set the variable&#39;s type.&lt;/p&gt;
&lt;p&gt;If Local is not present, IndexVariable must be a valid, existing variable.&lt;/p&gt;
&lt;p&gt;If Collection is an array, the loop will iterate through each element of the array, and the type of the index variable must match the element type of the array.&lt;/p&gt;
&lt;p&gt;If Collection is a string, the loop will iterate through each each character code of the string, and the type of the index variable must be numeric.&lt;/p&gt;
&lt;p&gt;If Collection is an object, it must provide the following method:&lt;/p&gt;
&lt;pre&gt;
Method ObjectEnumerator:Object()
&lt;/pre&gt;

&lt;p&gt;The object returned by this method must itself provide the following methods:&lt;/p&gt;
&lt;pre&gt;
Method HasNext:Bool()
Method NextObject:Object()
&lt;/pre&gt;

&lt;p&gt;This allows you to build &#39;collection&#39; style objects, such as the List and Map classes included in the standard Monkey modules that can be iterated through using For EachIn loops.&lt;/p&gt;
&lt;h3&gt;Exit and Continue&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Exit&lt;/code&gt; can be used within While, Repeat and For loops to abruptly exit the loop before the loop termination condition has been met.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Continue&lt;/code&gt; can be used within While, Repeat and For loops to force the loop to abruptly skip to the next loop iteration, skipping over any statements that may be remaining in the current loop iteration.&lt;/p&gt;
&lt;h3&gt;Assignment statements&lt;/h3&gt;
&lt;p&gt;An assignment statement modifies a variable&#39;s value, and has the syntax:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;VarExpression&lt;/em&gt; &lt;em&gt;Operator&lt;/em&gt; &lt;em&gt;Expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where VarExpression is an expression that evaluates to a variable, and Operator is one of the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;*=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;/=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Shl=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Shr=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Mod=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;+=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;-=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;~=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|=&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;=&lt;/code&gt; operator is used for plain assignment, while the remaining operators are used for update assignments.&lt;/p&gt;
&lt;h3&gt;Expression statements&lt;/h3&gt;
&lt;p&gt;You may also use certain expressions as program statements. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Function or method call expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;functions&quot;&gt;

&lt;h2&gt;Functions&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A function is a self contained block of statements that can be called (or invoked) repeatedly from elsewhere in the program. Functions can also be passed parameters and return a result.&lt;/p&gt;
&lt;p&gt;The syntax for declaring a function is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Function&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;ReturnType&lt;/em&gt; &lt;code&gt;(&lt;/code&gt; &lt;em&gt;Parameters&lt;/em&gt; &lt;code&gt;)&lt;/code&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;End&lt;/code&gt; [ &lt;code&gt;Function&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Function Eat:Void( amount:Int )
    ...
End
&lt;/pre&gt;

&lt;p&gt;Parameters is a comma separated sequence of function parameters:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;Type&lt;/em&gt; [ &lt;code&gt;=&lt;/code&gt; &lt;em&gt;InitExpression&lt;/em&gt; ]&lt;/p&gt;
&lt;p&gt;Or...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:=&lt;/code&gt; &lt;em&gt;InitExpression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you provide an InitExpression when declaring a function parameter, this means that the parameter has a default value and that the parameter can be optionally omitted when the function is called.&lt;/p&gt;
&lt;p&gt;Once you have declared a function, it can be called with the syntax: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;FunctionIdentifier&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;em&gt;Arguments&lt;/em&gt; &lt;code&gt;)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;where Arguments is a comma separated sequence of expressions.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Function Sum:Int( x:Int,y:Int )
    Return x+y
End

Function Main()
    Print Sum( 10,20 )
End
&lt;/pre&gt;

&lt;p&gt;Here is an example of using default parameters:&lt;/p&gt;
&lt;pre&gt;
Function Sum( x:Int=0,y:Int=0,z:Int=0 )
    Print x+y+z
End

Function Main()
    Print Sum()         &#39;same as calling Sum( 0,0,0 )
    Print Sum( 10,20 )  &#39;same as calling Sum( 10,20,0 )
    Print Sum( 10,,30 ) &#39;same as calling Sum( 10,0,30 )
End
&lt;/pre&gt;

&lt;h3&gt;Function overloading&lt;/h3&gt;
&lt;p&gt;Functions can also be overloaded. This means that multiple declarations can share the same name, as long as they each have different parameters. Methods can be overloaded in exactly the same way as functions.&lt;/p&gt;
&lt;p&gt;When a function is called, Monkey looks at the number and type of the parameters used in the call and looks for a matching overloaded version to use. For example:&lt;/p&gt;
&lt;pre&gt;
Function Add( value:Int )
End

Function Add( value:Float )
End

Function Add( value:String )
End

Function Main()
    Add( 10 )   &#39;calls first version as 10 is of type Int
    Add( 10.0 ) &#39;calls second version as 10.0 is of type Float
    Add( &quot;10&quot; ) &#39;calls third version as &quot;10&quot; is of type String
End
&lt;/pre&gt;

&lt;p&gt;The number of parameters can also be used to differentiate between overloaded functions. For example:&lt;/p&gt;
&lt;pre&gt;
Function Set( x )
End

Function Set( x, y )
End

Function Main()
    Set( 10 )    &#39;calls first version
    Set( 10,20 ) &#39;calls second version as it has two parameters
End
&lt;/pre&gt;

&lt;p&gt;When determining which overloaded version to actually use, Monkey uses the following logic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If an overloaded version is found that is an exact match for the number and type of function call parameters, that version is used. Note that if the function call involves the use of any default parameters, it is not considered an exact match.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, if there is exactly one overloaded version that can be called by implicitly converting  the function call parameters, that version is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, an error is generated. In this case, you will need to manually cast some or all of the function call parameters to create an exact match.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Function Add( value:Int )
End

Function Add( value:String )
End

Function Main()
    Add( 10 )   &#39;OK, calls first version
    Add( &quot;10&quot; ) &#39;OK, calls second version
    Add( 10.0 ) &#39;error - unable to determine which version to call
End
&lt;/pre&gt;

&lt;p&gt;The error is caused by the fact that the function call parameter  - &#39;10.0&#39; - is a floating point value and can therefore be implicitly converted to either an integer or a string, so Monkey cannot decide which overload to use.&lt;/p&gt;
&lt;p&gt;To solve this problem, you would need to explicitly cast the parameter to either an integer or a string to give Monkey a &#39;hint&#39; about which version you want used.&amp;nbsp; For example:&lt;/p&gt;
&lt;pre&gt;
    Add( Int(10.0) )        &#39;Casts the float to an integer, calls first version
&lt;/pre&gt;

&lt;a name=&quot;methods&quot;&gt;

&lt;h2&gt;Methods&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A Method is a function that is bound to a class. A method has implicit access to all members of its class, such as fields, globals and other methods and functions..&lt;/p&gt;
&lt;p&gt;The syntax for declaring a method is similar to that for declaring a function:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Method&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;ReturnType&lt;/em&gt; &lt;code&gt;(&lt;/code&gt; &lt;em&gt;Parameters&lt;/em&gt; &lt;code&gt;)&lt;/code&gt; [ &lt;code&gt;Property&lt;/code&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Statements...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;End&lt;/code&gt; [ &lt;code&gt;Method&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;Within a method you can also use the special &lt;code&gt;Self&lt;/code&gt; and &lt;code&gt;Super&lt;/code&gt; variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Self&lt;/code&gt; may be used within a method to access the object the method is associated with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Super&lt;/code&gt; may be used within a method to call &#39;super class&#39; methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The optional &lt;code&gt;Property&lt;/code&gt; keyword can be used to declare a &#39;property method&#39;.&lt;/p&gt;
&lt;p&gt;A property method with 0 parameters can be invoked without any brackets. A property method with 1 parameter can be invoked be using it as the left-hand-side of an assignment statement, in which case the right-hand-side expression of the assignment is passed to the property method.&lt;/p&gt;
&lt;p&gt;You can therefore create methods that behave like fields, but actually execute code when they are read or written. You can use method overloading to provide both read and write property methods, or provide just a read method, or even just a write method.&lt;/p&gt;
&lt;p&gt;It is illegal to declare a property method with 2 or more parameters.&lt;/p&gt;
&lt;a name=&quot;classes&quot;&gt;

&lt;h2&gt;Classes&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A class is a kind of &#39;blueprint&#39; for creating objects at runtime.&lt;/p&gt;
&lt;p&gt;The syntax for declaring a class is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Class&lt;/code&gt; Identifier [ &amp;lt; Parameters &amp;gt; ] [ &lt;code&gt;Extends&lt;/code&gt; Class ] [ &lt;code&gt;Implements&lt;/code&gt; Interfaces ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Declarations...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;End&lt;/code&gt; [ &lt;code&gt;Class&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;Classes can contain field, method, constant, global and function declarations.&lt;/p&gt;
&lt;p&gt;If no base class is specified using Extends, the class defaults to extending the built in Object class.&lt;/p&gt;
&lt;p&gt;The Implements keyword is used to implement interfaces, and must be followed by a comma separated list of interface names. Please refer to the Interfaces section for more on interfaces. &lt;/p&gt;
&lt;p&gt;A class is also a valid scope, and any constants, globals and functions declared within a class can be accessed outside of the class using the scope member access operator &#39;.&#39;. For example:&lt;/p&gt;
&lt;pre&gt;
Class C
   Global T
End

Function Main()
    C.T=10
End
&lt;/pre&gt;

&lt;p&gt;Once you have declared a class, you can create objects of that class at runtime using the New operator. For example:&lt;/p&gt;
&lt;pre&gt;
Class MyClass
    Field x,y,z
End

Function Main()
    Local myObject:=New MyClass
    myObject.x=10
    myObject.y=20
    myObject.z=30
End
&lt;/pre&gt;

&lt;h3&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructors are special methods that are called each time an object is created with New.&lt;/p&gt;
&lt;p&gt;To declare a constructor, you simply declare a class method and name it New.&lt;/p&gt;
&lt;p&gt;Constructors can take parameters and can be overloaded.&lt;/p&gt;
&lt;p&gt;To invoke a super class constructor within a constructor, use the special &lt;code&gt;Super&lt;/code&gt; variable.&lt;/p&gt;
&lt;a name=&quot;interfaces&quot;&gt;

&lt;h2&gt;Interfaces&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;An interface is similar to a class, except that it can only contain constants and abstract methods.&lt;/p&gt;
&lt;p&gt;Classes can implement an interface using the Implements keyword in the class declaration.&lt;/p&gt;
&lt;p&gt;Classes that implement an interface must declare each method declared in the interface.&lt;/p&gt;
&lt;p&gt;An interface can be used where ever a class is expected, for example when declaring the types of variables, or function return types. An interface cannot however be used with New.&lt;/p&gt;
&lt;p&gt;An Interface can also optionally extend existing interfaces, in which cases all methods in all extended interfaces must be declared by any implementing classes.&lt;/p&gt;
&lt;p&gt;Interfaces can not be generic.&lt;/p&gt;
&lt;p&gt;The syntax for declaring an interface is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Interface&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; [ &lt;code&gt;Extends&lt;/code&gt; &lt;em&gt;Interfaces&lt;/em&gt; ]&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;Declarations...&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;End&lt;/code&gt; [ &lt;code&gt;Interface&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;All methods declared inside an interface are automatically treated as abstract, and can therefore have no &#39;body&#39;.&lt;/p&gt;
&lt;p&gt;Here is an example of using interfaces:&lt;/p&gt;
&lt;pre&gt;
Interface Moveable
    Method Move()
End

Interface Drawable
    Method Draw()
End

Class Actor Implements Moveable,Drawable
    Method Move()
        Print &quot;Actor.Move()&quot;
    End
    Method Draw()
        Print &quot;Actor.Draw()&quot;
    End
End

Function Move( moveable:Moveable )
    moveable.Move
End

Function Draw( drawable:Drawable )
    drawable.Draw
End

Function Main()
    Local actor:=New Actor

Move actor
    Draw actor
End
&lt;/pre&gt;

&lt;a name=&quot;generics&quot;&gt;

&lt;h2&gt;Generic classes&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Generic classes allow you to write code that is not specific to a single data type.&lt;/p&gt;
&lt;p&gt;A generic class is declared in a similar way to a normal class, only with an additional set of &#39;type parameters&#39; enclosed within &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Class Pointer&lt;T&gt;
    Method Set( data:T )
        _data=data
    End

Method Get:T()
        Return _data
    End

Private

Field _data:T

End
&lt;/pre&gt;

&lt;p&gt;Type parameters can be any valid identifier. Here, T is such a type parameter.&lt;/p&gt;
&lt;p&gt;Within the declaration of a generic class, type parameters may be used anywhere a type is normally expected, for example, when declaring variables and function return types, and when creating new objects or arrays.&lt;/p&gt;
&lt;p&gt;When it comes to actually using a generic class, you must provide actual types to be used in place of type parameters. Types parameters can be of any valid type, including int, float, string and array.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Class Actor
End

Function Main()
    Local pointer:Pointer&lt;Actor&gt;
    pointer=New Pointer&lt;Actor&gt;
    pointer.Set New Actor
    Local actor:=pointer.Get()
End
&lt;/pre&gt;

&lt;p&gt;The syntax Pointer&lt;Actor&gt; indicates an &#39;instantiation&#39; of the generic class Pointer&lt;T&gt;.&lt;/p&gt;
&lt;p&gt;This is in itself a unique class, so each time you use the Pointer&lt;T&gt; class with a different type  for T, you are actually creating a whole new class.&lt;/p&gt;
&lt;p&gt;Generic classes are commonly used for writing container classes such as lists, stacks and so on, and the standard Monkey modules provide a set of simple generic container classes.&lt;/p&gt;
&lt;a name=&quot;modules&quot;&gt;

&lt;h2&gt;Modules&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;A Monkey module corresponds to a single Monkey source file, and provides a named scope for the constants, globals, functions and classes declared in that file. Every Monkey source file declares a module, and every module has an associated source file.&lt;/p&gt;
&lt;p&gt;The name of the module scope is the same as the name of the file (minus the directory path and file extension), so the names of Monkey source files must also be valid Monkey identifiers.&lt;/p&gt;
&lt;p&gt;It is also strongly recommend that file/module names be completely lowercase - both to prevent any issues with cased/uncased filesystems and to provide consistency with the standard module set.&lt;/p&gt;
&lt;p&gt;One module may import another using the import statement. All import statements must appear at the top of a module before any declarations. The syntax for an import statement is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Import&lt;/code&gt; &lt;em&gt;ModulePath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where ModulePath describes the file location of the Monkey module to import. This must be a sequence of &#39;dot&#39; separated identifiers, and is treated as a relative filesystem path with dots representing directory separators. The last component in the path represents either an actual .monkey source file, or a directory containing a .monkey source file of the same name.&lt;/p&gt;
&lt;p&gt;Given a module&#39;s relative path, Monkey will look for an actual module to import in the following locations (and in this order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The current directory - ie: the directory the importing file is in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The project directory - ie: the directory the main source file is in. This is the source file that was passed to the &#39;trans&#39; compiler, and that contains the declaration for Main().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The modules directory - ie: the directory named &#39;modules&#39; in the Monkey distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, given the following import directive:&lt;/p&gt;
&lt;pre&gt;
Import myutil.mycolor
&lt;/pre&gt;

&lt;p&gt;Monkey will first look for the files myutil/mycolor.monkey and myutil/mycolor/mycolor.monkey in the current directory.&lt;/p&gt;
&lt;p&gt;(Note: the reason modules are allowed to be represented as either a single .monkey file, or as a .monkey file within a directory of the same name is for pure convenience. Sometimes it&#39;s more convenient for a module to consist of a single file, while sometimes it&#39;s more convenient for a module to have its own directory.)&lt;/p&gt;
&lt;p&gt;If either is found, it is imported into the current module and the search ends.&lt;/p&gt;
&lt;p&gt;If both are found, an error is generated.&lt;/p&gt;
&lt;p&gt;If neither is found the search continues with the project directory and, failing that, the modules directory.&lt;/p&gt;
&lt;p&gt;If the module is not found anywhere, an error is generated.&lt;/p&gt;
&lt;p&gt;Once successfully imported, the importing module can access the declarations made in the imported module, by using the imported module&#39;s name as a scope.&lt;/p&gt;
&lt;p&gt;Here is a simple import example:&lt;/p&gt;
&lt;pre&gt;
&#39;----- file1.monkey -----
Import file2                &#39;after this, file2 can be used as a scope

Function Main()
    Print file2.X        &#39;access global X in file2 module

file2.Test                &#39;access function Test in file2 module
End

&#39;---- file2.monkey ----
Global X:=1

Function Test()
    Print &quot;file2.Test&quot;
End
&lt;/pre&gt;

&lt;p&gt;When accessing identifiers in imported modules, Monkey allows you to omit the module scope as long as there are no &#39;clashes&#39; between identifiers in multiple modules. For example:&lt;/p&gt;
&lt;pre&gt;
&#39;----- file1.monkey ----
Import file2
Import file3

Function Main()

Print X     &#39;OK, accesses file2.X
    Print Y     &#39;OK, accesses file3.Y
    Test        &#39;ERROR! Which Test? file2.Test or file3.Test?
    file2.Test  &#39;OK, I now know which module to get Test from

End

&#39;----- file2.monkey  -----
Global X:=1

Function Test()
    Print &quot;file2.Test&quot;
End

&#39;----- file3.monkey -----
Global Y:=2

Function Test()
    Print &quot;file3.Test&quot;
End
&lt;/pre&gt;

&lt;p&gt;By default, any imports made by a module are automatically made available to importers of that module. That is, if module X imports module Y, and module Y imports module Z, the result is that module X effectively imports module Z.&lt;/p&gt;
&lt;p&gt;However, if an import is declared to be private, that import is NOT made available. For example:&lt;/p&gt;
&lt;pre&gt;
&#39;----- file1.monkey -----
Import file2
Function Main()

Print X  &#39;OK, accesses file2.X
    Print Y  &#39;OK, accesses file3.Y
    Print Z  &#39;ERROR! can&#39;t see file.Z

End

&#39;----- file2.monkey -----
Import file3                &#39;Public import: When you import file2, you also import file3

Private
Import file4                &#39;Private - ie: internal use only. Only file2 can access file4.&amp;nbsp; file1 cannot access file4.

Public
Global X:=1

&#39;----- file3.monkey -----
Global Y:=2

&#39;----- file4.monkey -----
Global Z:=3
&lt;/pre&gt;

&lt;p&gt;Modules can be stored in a directory hierarchy and imported using a &#39;dotted&#39; module path, for example:&lt;/p&gt;
&lt;pre&gt;
&#39;----- file1.monkey -----
Import file2
Import util.file3

Function Main()
    Print file2.X
    Print file3.Y
End

&#39;----- util/file2.monkey ----
Global X:=1

&#39;----- util/file3.monkey -----
Global Y:=2
&lt;/pre&gt;

&lt;p&gt;Note that the directory path (in this case, &#39;util&#39;) is not used in any way except to locate the module. The module name is still just &#39;file3&#39; - not &#39;util.file3&#39;.&lt;/p&gt;
&lt;h3&gt;The Alias directive&lt;/h3&gt;
&lt;p&gt;The Alias directive allows you to assign a local name to a constant, global, function or class declared in another module. This can be used to create &#39;shortcuts&#39; for clashing identifiers.&lt;/p&gt;
&lt;p&gt;The syntax for Alias is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Alias&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;em&gt;ModulePath&lt;/em&gt; &lt;code&gt;.&lt;/code&gt; &lt;em&gt;Identifier&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alias directives must appear in the &#39;import&#39; section of a module, before any code.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
&#39;----- file1.monkey -----
Import file2
Import file3

Alias T=file2.T                &#39;which &#39;T&#39; to use

Function Main()
    Print T                   &#39;Prints &#39;1&#39;
End

&#39;----- file2.monkey -----
Global T:=1

&#39;----- file3.monkey -----
Global T:=2
&lt;/pre&gt;

&lt;a name=&quot;visibility&quot;&gt;

&lt;h2&gt;Public and Private&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;The Public and Private directives are used to control the visibility of subsequent declarations in a module or class.&lt;/p&gt;
&lt;p&gt;If the Public directive is used in the main body of a module, all subsequent declarations will be public, and will be visible outside of the current module.&lt;/p&gt;
&lt;p&gt;If the Private directive is used in the main body of a module, all subsequent declarations will be private and will not be visible outside of the current module.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
Private
Global x,y,z        &#39;These are private to the current module

Public
Global P,Q,R        &#39;These can be used by any module
&lt;/pre&gt;

&lt;p&gt;When used inside a class declaration, Public and Private work in a similar way to control the visibility of subsequent member declarations. For example:&lt;/p&gt;
&lt;pre&gt;
Class MyClass
    Private
    Field x,y,z        &#39;these are NOT visible outside of this module.

Public
    Field P,Q,R        &#39;these ARE visible outside of this module.
End
&lt;/pre&gt;

&lt;p&gt;Note that private class members are not private to the class, but to the entire module. This means that code outside of the class but within the same module can still access class private members.&lt;/p&gt;
&lt;a name=&quot;extern&quot;&gt;

&lt;h2&gt;External declarations&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;The Extern directive is used to connect Monkey code to non-Monkey code. It lets you mix Monkey code (to be translated into the target platform language) with native target platform code.&lt;/p&gt;
&lt;p&gt;When the Extern directive is used in the main body of a module, all subsequent global, function and class declarations will be treated as external declarations.&lt;/p&gt;
&lt;p&gt;External declarations are assumed to be implemented elsewhere in native code, and as such may not contain a &#39;body&#39;.&lt;/p&gt;
&lt;p&gt;In the case of external global variables, this means the global may not be initialized - it is assumed to be initialized by native code.&lt;/p&gt;
&lt;p&gt;In the case of external functions, this means the function may not contain any code, and must not be terminated with an End directive.&lt;/p&gt;
&lt;p&gt;In the case of external classes, this means any globals or methods declared in the class may not contain a &#39;body&#39; either.&lt;/p&gt;
&lt;p&gt;External declarations may however be assigned a &#39;symbol&#39; in the form of a string literal. This is the native symbol to be used by the Monkey translator when the declaration is referenced by Monkey code.&lt;/p&gt;
&lt;p&gt;By default, external declarations are public. You can use Extern Private to prevent external declarations from being visible outside the current module.&lt;/p&gt;
&lt;p&gt;Here are some examples of using extern:&lt;/p&gt;
&lt;pre&gt;
Extern

Global ActiveDriver:Driver=&quot;xyzActiveDriver&quot;  &#39;Native name of this global is xyzActiveDriver

Class Driver=&quot;xyzDriver&quot;   &#39;The native name of this class is &#39;xyzDriver&#39;.
    Method Method1()       &#39;By default, native name is same as declaration name - Method1 here.
    Method Method2()       &#39;native name is Method2
End

Public        &#39;return to public declarations
&lt;/pre&gt;

&lt;a name=&quot;memory&quot;&gt;

&lt;h2&gt;Memory Management&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Monkey is a garbage collected language, and depends on the underlying target language to provide memory management.&lt;/p&gt;
&lt;p&gt;Finalizers are not supported. If you need an object to be &#39;destroyable&#39;, you will need to add a &#39;Destroy&#39; type method.&lt;/p&gt;
&lt;p&gt;The garbage collector is capable of collecting cyclic data structures such as linked lists automatically.&lt;/p&gt;
&lt;p&gt;The current C++ garbage collector will only collect garbage when control is returned to the OS. In the case of C++ Mojo targets such as IOS and GLFW, this occurs after any of the &#39;On&#39; methods such as OnCreate, OnUpdate etc return.&lt;/p&gt;
&lt;p&gt;In general, the best way to use the garbage collector is to ignore it! Although such practices as &#39;nulling out&#39; object references are common, they are seldom required. &lt;/p&gt;
&lt;p&gt;But it&#39;s a good idea to monitor your apps memory requirements as you develop anyway. This will allow you to catch any memory issues, GC related or otherwise, early on.&lt;/p&gt;
&lt;a name=&quot;preprocessor&quot;&gt;

&lt;h2&gt;The preprocessor&lt;/h2&gt;
&lt;/a&gt;

&lt;p&gt;Monkey contains a very simple built-in preprocessor based on the syntax of the Monkey If statement that allows you to enable or disable blocks of code from being generated or translated, based on certain conditions.&lt;/p&gt;
&lt;p&gt;The following preprocessor directives are supported:&lt;/p&gt;
&lt;p&gt;#If&lt;br /&gt;
#ElseIf&lt;br /&gt;
#Else&lt;br /&gt;
#End&lt;br /&gt;
#Rem&lt;br /&gt;
#Print&lt;br /&gt;
#Error&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Preprocessor directives must appear at the start of a line, and may be preceded by optional whitespace.&lt;/p&gt;
&lt;p&gt;The #If and #Else If directives must be followed by a constant Monkey expression. If this expression evaluates to true, then code generation is enabled, otherwise it is disabled.&lt;/p&gt;
&lt;p&gt;The following built in constants may be used in preprocessor expressions:&lt;/p&gt;
&lt;table class=&quot;c&quot;&gt;
&lt;tr&gt;&lt;th&gt;Constant&lt;/th&gt;&lt;th&gt;Possible values&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HOST&lt;/td&gt;&lt;td&gt;winnt macos&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LANG&lt;/td&gt;&lt;td&gt;js as cs java cpp&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TARGET&lt;/td&gt;&lt;td&gt;html5 flash xna android ios glfw stdcpp&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CONFIG&lt;/td&gt;&lt;td&gt;debug release&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The #Rem directive is exactly the same as #If False - it unconditionally disables code generation. Note that this allows &#39;block rems&#39; to be &#39;nested&#39;.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>StringSet</title>
<link>http://blitz-wiki.appspot.com/StringSet</link>
<guid>http://blitz-wiki.appspot.com/StringSet</guid>
<pubDate>Tue, 17 Jan 2012 04:05:35 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class StringSet&lt;/h1&gt;
&lt;p&gt;Convenience class for managing sets of strings.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.set&amp;{FORMAT}&quot; title=&quot;monkey.set (create)&quot;&gt;monkey.set&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class StringSet Extends Set&amp;lt;String&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;StringSet is a convenience class for managing sets of strings.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Set&quot; title=&quot;Set&quot;&gt;Set&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>IntSet</title>
<link>http://blitz-wiki.appspot.com/IntSet</link>
<guid>http://blitz-wiki.appspot.com/IntSet</guid>
<pubDate>Tue, 17 Jan 2012 04:05:29 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class IntSet&lt;/h1&gt;
&lt;p&gt;Convenience class for managing sets of ints.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.set&amp;{FORMAT}&quot; title=&quot;monkey.set (create)&quot;&gt;monkey.set&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class IntSet Extends Set&amp;lt;Int&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;IntSet is a convenience class for managing sets of ints.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Set&quot; title=&quot;Set&quot;&gt;Set&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>FloatSet</title>
<link>http://blitz-wiki.appspot.com/FloatSet</link>
<guid>http://blitz-wiki.appspot.com/FloatSet</guid>
<pubDate>Tue, 17 Jan 2012 04:05:22 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class FloatSet&lt;/h1&gt;
&lt;p&gt;Convenience class for managing sets of floats.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.set&amp;{FORMAT}&quot; title=&quot;monkey.set (create)&quot;&gt;monkey.set&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class FloatSet Extends Set&amp;lt;Float&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;FloatSet is a convenience class for managing sets of floats.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Set&quot; title=&quot;Set&quot;&gt;Set&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>StringMap</title>
<link>http://blitz-wiki.appspot.com/StringMap</link>
<guid>http://blitz-wiki.appspot.com/StringMap</guid>
<pubDate>Tue, 17 Jan 2012 04:04:39 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class StringMap&lt;/h1&gt;
&lt;p&gt;Convenience class for mapping strings to values.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.map&quot; title=&quot;monkey.map&quot;&gt;monkey.map&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class StringMap&amp;lt;T&amp;gt; Extends Map&amp;lt;String,T&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;StringMap is a convenience class for mapping strings to values.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Map&quot; title=&quot;Map&quot;&gt;Map&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>IntMap</title>
<link>http://blitz-wiki.appspot.com/IntMap</link>
<guid>http://blitz-wiki.appspot.com/IntMap</guid>
<pubDate>Tue, 17 Jan 2012 04:04:28 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class IntMap&lt;/h1&gt;
&lt;p&gt;Convenience class for mapping ints to values.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.map&quot; title=&quot;monkey.map&quot;&gt;monkey.map&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class IntMap&amp;lt;T&amp;gt; Extends Map&amp;lt;Int,T&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;IntMap is a convenience class for mapping ints to values.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Map&quot; title=&quot;Map&quot;&gt;Map&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>FloatMap</title>
<link>http://blitz-wiki.appspot.com/FloatMap</link>
<guid>http://blitz-wiki.appspot.com/FloatMap</guid>
<pubDate>Tue, 17 Jan 2012 04:04:17 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class FloatMap&lt;/h1&gt;
&lt;p&gt;Convenience class for mapping floats to values.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int&quot; href=&quot;/monkey.map&quot; title=&quot;monkey.map&quot;&gt;monkey.map&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class FloatMap&amp;lt;T&amp;gt; Extends Map&amp;lt;Float,T&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;FloatMap is a convenience class for mapping floats to values.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Map&quot; title=&quot;Map&quot;&gt;Map&lt;/a&gt;&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>StringStack.Join</title>
<link>http://blitz-wiki.appspot.com/StringStack.Join</link>
<guid>http://blitz-wiki.appspot.com/StringStack.Join</guid>
<pubDate>Tue, 17 Jan 2012 03:56:52 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Method Join&lt;/h1&gt;
&lt;p&gt;Join elements of stack.&lt;/p&gt;
&lt;p&gt;Class: &lt;a class=&quot;int&quot; href=&quot;/StringStack&quot; title=&quot;StringStack&quot;&gt;StringStack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Method Join:String( separator:String )&lt;/p&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;p&gt;separator - string to use to separate elements.&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Concatenates the elements of the stack and joins them together with separator.&lt;/p&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>StringStack</title>
<link>http://blitz-wiki.appspot.com/StringStack</link>
<guid>http://blitz-wiki.appspot.com/StringStack</guid>
<pubDate>Tue, 17 Jan 2012 03:57:26 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class StringStack&lt;/h1&gt;
&lt;p&gt;Convenience class for dealing with stacks of strings.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.stack&amp;{FORMAT}&quot; title=&quot;monkey.stack (create)&quot;&gt;monkey.stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class StringStack Extends Stack&amp;lt;String&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;StringStack is a convenience class for dealing with stacks of strings.&lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/StringStack.Join&quot; title=&quot;StringStack.Join&quot;&gt;Join:String( separator:String )&lt;/a&gt;&lt;br /&gt;
Join items in stack.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Stack&quot; title=&quot;Stack&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Function Main()

Local vec:=New StringStack

vec.AddLast &quot;Hello&quot;
    vec.AddLast &quot;there&quot;
    vec.AddLast &quot;this&quot;
    vec.AddLast &quot;is&quot;
    vec.AddLast &quot;a&quot;
    vec.AddLast &quot;StringStack&quot;

Print vec.Join( &quot; &quot; )

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>IntStack</title>
<link>http://blitz-wiki.appspot.com/IntStack</link>
<guid>http://blitz-wiki.appspot.com/IntStack</guid>
<pubDate>Tue, 17 Jan 2012 04:06:35 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class IntStack&lt;/h1&gt;
&lt;p&gt;Convenience class for dealing with stacks of ints.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.stack&amp;{FORMAT}&quot; title=&quot;monkey.stack (create)&quot;&gt;monkey.stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class IntStack Extends Stack&amp;lt;Int&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;IntStack is a convenience class for dealing with stacks of ints.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Stack&quot; title=&quot;Stack&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Function Main()

Local vec:=New IntStack

For Local i=1 To 10
        vec.AddLast i
    Next

For Local i=Eachin vec
        Print i
    Next

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

<item>
<title>FloatStack</title>
<link>http://blitz-wiki.appspot.com/FloatStack</link>
<guid>http://blitz-wiki.appspot.com/FloatStack</guid>
<pubDate>Tue, 17 Jan 2012 04:06:19 +0000</pubDate>
<author>blitzmunter@gmail.com</author>
<description>&lt;h1&gt;Class FloatStack&lt;/h1&gt;
&lt;p&gt;Convenience class for dealing with stacks of floats.&lt;/p&gt;
&lt;p&gt;Module: &lt;a class=&quot;int missing&quot; href=&quot;/w/edit?page=monkey.stack&amp;{FORMAT}&quot; title=&quot;monkey.stack (create)&quot;&gt;monkey.stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Class FloatStack Extends Stack&amp;lt;Float&amp;gt;&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;FloatStack is a convenience class for dealing with stacks of floats.&lt;/p&gt;
&lt;h2&gt;See also&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;int&quot; href=&quot;/Stack&quot; title=&quot;Stack&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;
Function Main()

Local vec:=New FloatStack

For Local i#=1 To 10
        vec.AddLast i
    Next

For Local i#=Eachin vec
        Print i
    Next

End
&lt;/pre&gt;</description>


<geo:lat></geo:lat>
<geo:lon></geo:lon>
</item>

</channel>
</rss>
