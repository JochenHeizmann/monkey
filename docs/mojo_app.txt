
#Module mojo.app

The app module contains the @App class along with various support functions for controlling application behaviour.


#Class App

This is the main application class.

All mojo based applications must declare a class that extends @App and that implements the @OnCreate, @OnUpdate, @OnRender and @OnLoading methods.

A new instance of this class must be then created inside your applications @Main function. The @OnCreate, @OnUpdate, @OnRender and @OnLoading methods will be called as necessary while your application runs.

@OnCreate is called when mojo has been initialized and your app can safely start using mojo functions. This is generally where code to load resources such and images and sounds goes. This is where the application's update rate is initially set too - see: @SetUpdateRate.

@OnUpdate is called when the update timer ticks, and is where your game logic code should go. The update timer is set using the @SetUpdateRate function.

@OnRender is called when your application should render itself. If the update timer is ticking, this is also called as soon as possible after @OnUpdate, however @OnRender may be called at any time in generally if your application requires refreshing.

@OnLoading is called insetad of @OnRender when your application should render itself, but there are still resources being loaded.

Import note: 

No mojo functions or methods should be used before @OnCreate is called! Before this, mojo is not fully initialized and cannot be safely used. This means that global variables cannot be initialied using @Millisecs, @LoadImage or indeed ANY mojo functions.


Example::
{{
Import mojo.app

Class MyApp Extends App

	Method OnCreate()
		Print "App succesfully created!"
	End

End

Function Main()
	Print "Creating new app..."
	New MyApp
End
}}

Example 2::
{{
Import mojo.app
Import mojo.graphics
Import mojo.input

Class MyGame Extends App
	Field x:Int=0
	Field y:Int=0
	
	Method OnCreate()
		'Load any graphics or sounds here
		SetUpdateRate 30
	End
	
	Method OnUpdate()
		x=MouseX
		y=MouseY
	End
	
	Method OnRender()
		Cls (0,0,0)
		DrawText "Hello World!",x,y
	End
End

Function Main()
	New MyGame
End
}}

#Method OnCreate

Syntax::

Method @OnCreate()

Description::

The @OnCreate method is called when mojo has been initialized and the application has been successfully created.

At this point, applications can start loading resources such as images and sounds, and set the update rate using @SetUpdateRate.

Example::
{{
Import mojo.app
Import mojo.graphics
Import mojo.input

Class MyGame Extends App
	Field x:Int=0
	Field y:Int=0
	Field playerShipSprite:Image
		
	Method OnCreate()

		'Load any images and sounds here
		'ship.png must be found in your project's .data folder
		playerShipSprite=LoadImage("ship.png")

		SetUpdateRate 30

		End
	
	Method OnUpdate()
		x=MouseX
		y=MouseY
	End
	
	Method OnRender()
		Cls
		DrawImage playerShipSprite,x,y
	End
End

Function Main()
	New MyGame
End
}}

#Method OnUpdate

Syntax::

Method @OnUpdate()

Description::

This method is automatically called when the application's update timer ticks. Once @OnUpdate has been called, mojo will then attempt to call @OnRender as soon as possible.

Note that @OnUpdate is only called if @SetUpdateRate has been called to start the update timer. Otherwise, your application will receive @OnRender calls only.

@OnUpdate is commonly used in conjunction with @OnRender to manage the main game loop. @OnUpdate is typically used to update objects and game state, while @OnRender is used to draw graphics.  

See Also::

@SetUpdateRate


#Method OnSuspend

Syntax::

Method @OnSuspend()

Description::

@OnSuspend is called when your application is about to be suspended. 

While suspended, Mojo will make no further calls to any applications 'On' methods, except for @OnResume.

Note that on some targets such as iOS and Android, @OnSuspend represents a 'last chance' to save application data before your application is terminated.


#Method OnResume

Syntax::

Method @OnResume()

Description::

@OnResume is called when your application is made active again after having been in a suspended state.


#Method OnRender

Syntax::

Method @OnRender()

Description::

This method is automatically called when the application should render itself, such as when the application first starts, or following an @OnUpdate call.

If your application is taking to long to update and/render itself, @OnRender calls may be skipped to allow it to 'catch up'.


See Also::

@OnUpdate, @OnLoading


#Method OnLoading

Syntax::

Method @OnLoading()

Description::

This method is called instead of @OnRender when the application should render itself, but there are still resources such as images or sounds in the process of being loaded.

See Also::

@OnRender

#End


#Function LoadState

Syntax::

Function @LoadState:String()

Description::

Loads a string representing the application's persistant state as previously saved with @SaveState.

If the application state hasn't yet been previously saved, @LoadState returns an empty string.

This is generally used to store data such as user preferences and high score tables.

Note: On the android target, building and uploading a new version of an application to a device will not clear the application's state. To do this, you must manually uninstall the application from the device first.

See Also::

@SaveState


Example::
{{
'run this app several times to see application state being updated.
Import mojo.app
Import mojo.graphics

Class MyApp Extends App

	Field state$
	
	Method OnCreate()
	
		'comment out the following line to reset state
		state=LoadState()

		If state
			Print "state found - updating state!"
			state=Int( state )+1
		Else
			Print "state not found - creating initial state!"
			state="1"
		Endif
		
		SaveState state
	End
	
	Method OnRender()
		Cls 
		DrawText "state="+state,0,0
	End
	
End

Function Main()
	New MyApp
End
}}

#Function SaveState

Syntax::

Function @SaveState( @state$ )

Parameters::

@state - application state to save.

Description::

Saves a string representing the application's persistant state.

This is generally used to store data such as user preferences and high score tables.

Note: On the android target, building and uploading a new version of an application to a device will not clear the application's state. To do this, you must manually uninstall the application from the device first.

See Also::

@LoadState


#Function LoadString

Syntax::

Function @LoadString$( @path$ )

Parameters::

@path - path of a file string to load as a string.

Description::

Returns the contents of a text file as a single string.  

The string can be of any length and may contain escape sequence characters (see the monkey Language Reference for a full list). For example, a text file could contain game data separated with line breaks which could be loaded as a string and then split into sub-strings.

Monkey will only load files that end with the following file extensions: .txt, .xml, .json.

Like all game data, text files must be saved in your project's .data folder or one of its sub-folders.

Example::
{{
'Important! Needs a test.txt file in the .data directory!
'
Import mojo.app

Class MyApp Extends App

	Method OnCreate()

		Local str$=LoadString( "test.txt" )
		
		Print "str.Length="+str.Length
		
		For Local line$=Eachin str.Split( "~n" )
			Print "line="+line
		Next
		
	End
	
End

Function Main()
	New MyApp
End
}}

#Function SetUpdateRate

Syntax::

Function @SetUpdateRate( @hertz )

Parameters::

@hertz - update rate in 'updates per second'

Description::

Sets the application's update rate.

This is the number of times per second that the application's @OnUpdate method should be called. Commonly used update rates are 15, 30 or 60 updates per second.

@OnRender is also called at the same frequency if possible (after each @OnUpdate), meaning @SetUpdateRate effectively also sets the target frames per second.

See Also::

@OnUpdate

Example::
{{
Import mojo.app
Import mojo.graphics

Class MyApp Extends App

	Field updates,updateRate

	Method OnCreate()
		updateRate=15
		SetUpdateRate updateRate
	End
	
	Method OnUpdate()
		updates+=1
		If updates=updateRate
			updates=0
			updateRate*=2
			If updateRate=240 updateRate=15
			SetUpdateRate updateRate
		Endif
		
	End
	
	Method OnRender()
		Cls 128,0,255
		DrawText "updateRate="+updateRate+", updates="+updates,0,0
	End
	
End

Function Main()
	New MyApp
End
}}

#Function Millisecs

Syntax::

Function @Millisecs()

Description::

Returns the number milliseconds (thousandths of a second) the application has been running. Divide this by 1000.0 to get the number of seconds the applications has been running.  

Example::
{{
Import mojo.app
Import mojo.graphics

Class MyApp Extends App

	Method OnCreate()
		SetUpdateRate 10
	End
	
	Method OnRender()
		Cls 128,0,255
		DrawText "Application has been running for: "+Millisecs()/1000.0+" seconds.",0,0
	End
	
End

Function Main()
	New MyApp
End
}}
